#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Ипморт библиотеки для работы с интерпретатором
import sys

# несколько строк для решения проблем с кодировкой русского текста
reload(sys)
sys.setdefaultencoding('utf-8')

"""
Программа расчета электрического обогрева нефтяных скважин.

"""
#------------------------------------------------------------------------------

# Импортируемые библиотеки

# Библиотека для работы с wxWidgets
import wx

# Библиотека для работы с Ribbon
import wx.lib.agw.ribbon as RB

# Библиотека для использования html текста
import wx.html as html

# Библиотека для работы с файловой системой (открытие и сохранение файлов через диалоговые окна)
import os

# Библиотеки для работы с продвинутым ноутбуком
import wx.lib.agw.aui as aui

import wx.aui

# Библиотека для работы со временем и датами
from time import strftime

import logging

import wx.lib.plot as plot

# Библиотека используется для 
import wx.adv


from __future__ import print_function

# Библиотеки для работы с графикой
import matplotlib 

matplotlib.use('WXAgg')
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigCanvas
  
from matplotlib.figure import Figure

# Библиотека для работы с матрицами
import  numpy

#----------------------------------------------------------------------
# Идентификаторы для кнопок меню в функциональном окне

ID_OpenFile = wx.NewIdRef()
ID_SaveAsFile = wx.NewIdRef()
ID_SetData = wx.NewIdRef()
ID_Run  = wx.NewIdRef()
ID_Plot = wx.NewIdRef()
ID_CreateReport = wx.NewIdRef()
ID_ViewReport = wx.NewIdRef()
ID_PrintReport = wx.NewIdRef()
ID_Help = wx.NewIdRef()


####################################################################################

class MainFrame(wx.Frame):
    """ 
    Создаем основное окно программы из которого будет вызываться 
    функциональное окно, используя которое можно получить результат расчета    """
#------------------------------------------------------------------------------
# Создаем фрейм
    def __init__(self, *args, **kwargs):
        super(MainFrame, self).__init__(*args, **kwargs)
        
        self.InitUI()
    
# Создаем меню
#------------------------------------------------------------------------------
    def InitUI(self):

        # Создаем панель меню
        menubar = wx.MenuBar()
        
        # Создаем меню 
        fileMenu = wx.Menu()
        
        # Создаем пункт меню 'Выход' с комбинацией быстрых клавиш
        quitItem = fileMenu.Append(wx.ID_EXIT, u'&Выход\tCtrl+Q', 'нажмите для выхода из программы')
    
        # Создаем меню 'Файл'
        menubar.Append(fileMenu, u'Файл')
        
        # Показываем панель меню
        self.SetMenuBar(menubar)
      
        #Создаем пункт меню 'Справка'
        helpMenu = wx.Menu()
    
        # Создаем пунк меню О программе
        aboutItem = helpMenu.Append(wx.ID_ABOUT, u"О программе", ' сведения о программе')

        # Создаем меню Справка
        menubar.Append(helpMenu, u'Справка')
        
        self.SetMenuBar(menubar)
        
#***************************************************************************************    
     
        """ При необходимости, здесь пишем код для дополнительных пунктов меню """ 
        
#****************************************************************************************

#---------------- Обрабатываем события из меню --------------------------------------------

        # Выходим из главного окна программы при нажатии 'Выход' 
        self.Bind(wx.EVT_MENU, self.OnQuit, quitItem)
        
        # Вызываем окно справки 'О программе'
        self.Bind(wx.EVT_MENU, self.AboutMessage, aboutItem)
        
#-------------------------------------------------------------------------------------------        
# Задаем дополнительные параметры основного окна
       
    # Задаем размер подменю 
        self.SetSize((350, 250))
        
        # Устанавливаем цвет фона
        self.SetBackgroundColour('#87857C')
        
        # Расположение
        self.Centre()

        # Создаем строку состояния StatusBar
        self.CreateStatusBar()
        
        # Выводим в нем приветствие
        self.PushStatusText("Добро пожаловать в программу")

#----------------- Создаем иконки ToolBar -----------------------------------------------------
    
        # Создаем панель
        toolbar = self.CreateToolBar()
        
        # Добавляем картинку значка
        ToolBarFirstIcon = toolbar.AddTool(wx.ID_ANY, 'Data', wx.Bitmap('data.jpg'), shortHelp="расчет обогрева скважины с ЭЦН")
        
        # Добавляем дополнительные иконки
        ToolBarSecondIcon = toolbar.AddTool(wx.ID_ANY, 'Data', wx.Bitmap('data1.jpg'), 
                                      shortHelp="расчет обогрева скважины со станком-качалкой")
        
        ToolBarThirdIcon = toolbar.AddTool(wx.ID_ANY, 'Data', wx.Bitmap('data.jpg'), shortHelp="расчет обогрева скважины газлифт")
        
        ToolBarFifthIcon = toolbar.AddTool(wx.ID_ANY, 'Data', wx.Bitmap('data.jpg'), 
                                           shortHelp="расчет обогрева скважины с винтовым насосом")
        
        
        # Делаем пенель видимой
        toolbar.Realize()

#------------ Вызываем функциональное окно программы -------------------------------------------

        # Кликаем мышкой по иконке и вызываем функциональное окно программы OnRibbonBar
        self.Bind(wx.EVT_TOOL, self.OnRibbonBar, ToolBarFirstIcon)
        
#-------- Задаем параметры главного окна --------------------------------------------------
        
        # Задаем размеры главного окна
        self.SetSize((400, 300))
        
        # Указываем название главного окна
        self.SetTitle(u'Обогрев скважины')
        
        # Задаем расположение
        self.Centre()

#----------------- Добавляем иконку в верхний левый угол главного окна ---------------------------

        self.panel = wx.Panel(self, wx.ID_ANY)
        
        # Размещаем картинку
        icon = wx.Icon('o&g1.jpg', wx.BITMAP_TYPE_JPEG)
        
        # Показываем в окне
        self.SetIcon(icon)
        
#***************************************************************************************************  
#                Процедуры
#**************************************************************************************************

    def OnQuit(self, event):
        """ Закрываем главное окно  """
        self.Close()
#--------------------------------------------------------------------------------------------------------  
#
    def AboutMessage(self, event):
        
        """ Выдодим окно справки """
        
        # Выводим информационное сообщение
        info = wx.adv.AboutDialogInfo()
        
        # Создаем шаблон для описания
        desc = ["\n Программа позволяет проводится теплотехнический расчет работы нефтяной скважины по данным технологической анкеты.\n",
                "Вводятся начальные данные по скважине. Строится геотерма скважины. Определяются теплопотери в грунт.",
                "Строится термограмма скважины с учетом характера движения жидкости. Определяется глубина отложения парафинов и проводится расчет параметров электрического кабеля.\n",
                "Информация о платформе: (%s,%s)\n",
                "Лицензия: частная"]
        desc = "\n".join(desc)
        
        # Получаем информацию по системе
        py_version = [sys.platform, ", python ", sys.version.split()[0]]
        platform = list(wx.PlatformInfo[1:])
        platform[0] += (" " + wx.VERSION_STRING)
        wx_info = ", ".join(platform)

        # Заполняем поля 
        info.SetName("Программа расчета обогрева нефтяных скважин\n")
        info.SetVersion("Версия 1.0")
        info.SetCopyright("Copyright (C) ОКБ <<Гамма>>")
        info.SetDescription(desc % (py_version, wx_info))
        info.SetWebSite("https://okb-gamma.ru/")
        info.AddDeveloper("Инженер-разработчик исследовательской группы ОГК, Гераськин Игорь Сергеевич")

        # Создаем и показываем диалог
        wx.adv.AboutBox(info)

#--------------------------------------------------------------------------------------------------------
# 
    def OnRibbonBar(self, event):
        """ Вызываем функциональное окно по нажатию на значок    """
        
        # Создаем диалоговое окно
        dlg = RibbonBar(None, title="Новый расчет", size=(500,180))
        
        # Показываем его
        dlg.ShowModal()
        
#----------------------------------------------------------------------------------------------------------
# Запускаем главное окно программы
def main():
    
    app = wx.App()
    ex = MainFrame(None)
    ex.Center()
    ex.Show()
    
    app.MainLoop()
    

#######################################################################################################################
class RibbonBar(wx.Dialog):
    """
    Создаем функциональное окно программы
    
    """
#---------------------------------------------------------------------------------------------------------------------
    def __init__(self, *ls, **kw):
        wx.Dialog.__init__(self, *ls, **kw)
        
        global setCalcPanel, setResult
        
#****************************** Создаем вкладку Главная **********************************************************

        """ В данной вкладке находятся стандартные 
              инструменты для работы с данными - значки Открыть и Сохранить как """
    
        # Создаем панель закладок        
        ribbonBar = RB.RibbonBar(self, wx.ID_ANY, agwStyle=RB.RIBBON_BAR_DEFAULT_STYLE|RB.RIBBON_BAR_SHOW_PANEL_EXT_BUTTONS)
        
        # Создаем вкладку Главная
        HomepageTab = RB.RibbonPage(ribbonBar, wx.ID_ANY, "Главная")
        
        # Создаем панель Стандартные
        HomepagePanel = RB.RibbonPanel(HomepageTab, wx.ID_ANY, u"Стандартные")
        
        # Размещаем панель на вкладке    
        setHomepagePanel = RB.RibbonButtonBar(HomepagePanel)
        
#------------------------------ Рисуем значки -----------------------------------------------------------         
        # Открыть
        HomepageIconOpen = wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN, wx.ART_OTHER, wx.Size(48, 48))
   
        # Определяем значок 'Сохранить как' кнопки (выбираем из ряда стандартных)
        HomepageIconSaveAs = wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE_AS, wx.ART_OTHER, wx.Size(48, 48))
       
        # Задаем название значка и рисуем его
        setHomepagePanel.AddSimpleButton(ID_OpenFile, u"Открыть", HomepageIconOpen, 'открыть файл')
        
        # Вызываем окно 'Открыть'
        setHomepagePanel.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.OnOpenFileRibbon, id=ID_OpenFile)
        
        # Задаем название значка и рисуем его
        setHomepagePanel.AddSimpleButton(ID_SaveAsFile, u"Сохранить как", HomepageIconSaveAs, 'сохранить файл с указанием имени')
        
         # Вызываем окно 'Открыть'
        setHomepagePanel.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.OnSaveAsFileRibbon, id=ID_SaveAsFile)
        
#******************************** Создаем вкладку Инструменты ***********************************************

        """ В данной вкладке находятся следующие инструменты:
            - Ввод данных
            - Пуск
            А на одной панели:
            - Создать отчет
            - Просмотр отчета
            - Построить график
            - Печать отчета
            
         """
      
        # Создаем вкладку Инструменты
        ToolsTab = RB.RibbonPage(ribbonBar, wx.ID_ANY, "Инструменты")
        
        # Делаем вкладку Инструменты активной 
        ribbonBar.SetActivePage(ToolsTab)
        
        # Создаем панель 'Данные'
        DataPanel = RB.RibbonPanel(ToolsTab, wx.ID_ANY, u"Данные")
        
        # Размещаем панель на вкладке
        setDataPanel = RB.RibbonButtonBar(DataPanel)
           
        # Задаем рисунок значка
        ToolsIconSetData = wx.Bitmap( "menu icons/data1.jpg", wx.BITMAP_TYPE_ANY)
        
        # Задаем название значка и всплывающей подсказки
        setDataPanel.AddSimpleButton(ID_SetData, u"Ввод данных", ToolsIconSetData, 'ввести данные для расчета')
        
        # Вызываем окно 'Ввод данных'
        setDataPanel.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.OnOpenNewWindow, id=ID_SetData)
            
#----------------------- Создаем панель Расчет ------------------------------------------------------------------------

        CalcPanel = RB.RibbonPanel(ToolsTab, wx.ID_ANY, u"Расчет")
     
        # Размещаем панель на вкладке
        setCalcPanel = RB.RibbonButtonBar(CalcPanel)
        
        # Задаем рисунок значка
        ToolsIconRunButton = wx.Bitmap( "menu icons/run1.jpg", wx.BITMAP_TYPE_ANY)
        
#-------------------------- Создаем панель Пуск ---------------------------------------------------------------------
        
        # Задаем название кнопки и значок
        setCalcPanel.AddSimpleButton(ID_Run, u"Пуск", ToolsIconRunButton, 'запустить расчет')
        
        # Вызываем окно 'Пуск'
        setCalcPanel.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.OnRunCalculation, id=ID_Run)
        
#------------------------ Создаем панель Результаты расчета -------------------------------------------------------

        PlotPanel = RB.RibbonPanel(ToolsTab, wx.ID_ANY, u"Результаты расчета")
        
        # Размещаем панель на вкладке
        setResult = RB.RibbonButtonBar(PlotPanel)
        
        # Задаем рисунок значка
        TooslIconPlot = wx.Bitmap( "menu icons/plot.jpg", wx.BITMAP_TYPE_ANY)
        
#------------------------ Создаем кнопку Создать отчет -----------------------------------------------------------------

        # Задаем рисунок значка
        ToolsIconReport = wx.Bitmap( "menu icons/report.jpg", wx.BITMAP_TYPE_ANY )
    
        # Создаем кнопку Создать отчет
        setResult.AddSimpleButton(ID_CreateReport, u"Создать отчет", ToolsIconReport, 'создать отчет')
      
         # Вызываем окно 'Создать отчет'
        setResult.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.OnCreateReport, id=ID_CreateReport)
        
#----------------------------- Создаем кнопку Просмотр отчета ---------------------------------------------------------- 
        # Задаем рисунок значка
        ToolsIconReview = wx.Bitmap( "menu icons/open.jpg", wx.BITMAP_TYPE_ANY )
       
        # Создаем кнопку Просмотр отчета
        setResult.AddSimpleButton(ID_ViewReport, u"Просмотр отчета", ToolsIconReview, 'открыть отчет для просмотра')
      
        # Вызываем окно 'Просмотр отчета'
        setResult.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.OnOpenViewer, id=ID_ViewReport)  
        
#----------------------------- Создаем кнопку Построить график -------------------------------------------------------------        
        
    # Создаем кнопку Построить график
        setResult.AddSimpleButton(ID_Plot, u"График", TooslIconPlot, 'построить график')
        
        # Вызываем окно 'Построить график'        
        setResult.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.OnPlotGraph, id=ID_Plot)

#----------------------------- Создаем кнопку Печать отчета -------------------------------------------------------------
        # Задаем рисунок значка
        ToolsIconPrint = wx.Bitmap( "menu icons/print2.jpg", wx.BITMAP_TYPE_ANY )
        
        # Создаем кнопку Печать отчета
        setResult.AddSimpleButton(ID_PrintReport, u"Печать отчета", ToolsIconPrint, 'напечатать отчет')       
        
        # Вызываем окно 'Просмотр отчета'
        setResult.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.onPrintDocument, id=ID_PrintReport)
        
#**************************************** Создаем вкладку Справка **************************************************************
    
        #Создаем вкладку Справка
        infoTab = RB.RibbonPage(ribbonBar, wx.ID_ANY, "Справка")
    
        # Создаем панель Информация
        HelpPanel = RB.RibbonPanel(infoTab, wx.ID_ANY, u"Информация")
        
        # Размещаем панель на вкладке
        helpinfo = RB.RibbonButtonBar(HelpPanel)

        # Задаем рисунок значка
        HelpIcon = wx.Bitmap( u"menu icons/help.jpg", wx.BITMAP_TYPE_ANY)
        
        # Создаем кнопку и ее название
        helpinfo.AddSimpleButton(ID_Help, u"Помощь", HelpIcon, 'справочные метериалы по программе')
    
        # Вызываем меню 'Помощь'
        helpinfo.Bind(RB.EVT_RIBBONBUTTONBAR_CLICKED, self.onOpenHelpWindow, id=ID_Help)
        
        # Показываем панель 
        ribbonBar.Realize()
        
        # Выравниваем        
        s = wx.BoxSizer(wx.VERTICAL)
        s.Add(ribbonBar, 0, wx.EXPAND)
        self.SetSizer(s)
        
#---------------------------------------------------------------------------------------------------------------------        
 # Управляем видимостью иконок на функциональной панели
    
 # Начальная установка кнопок - активны только 'Ввод данных' и 'Помощь'
    
        # Активность кнопки 'Открыть'  
        setHomepagePanel.EnableButton(ID_OpenFile, True)
        
        # Активность кнопки 'Сохранить как'  
        setHomepagePanel.EnableButton(ID_SaveAsFile, False)
        
        # Активность кнопки 'Ввод данных'  
        setDataPanel.EnableButton(ID_SetData, True)
        
        # Активность кнопки 'Пуск'  
        setCalcPanel.EnableButton(ID_Run, False)
        
        # Активность кнопки 'Создать отчет' 
        setResult.EnableButton(ID_CreateReport, False)
        
        # Активность кнопки 'Просмотр отчета' 
        setResult.EnableButton(ID_ViewReport, False)
        
        
        # Активность кнопки 'Построить график'  
        setResult.EnableButton(ID_Plot, False)
        
        # Активность кнопки 'Печать отчета' 
        setResult.EnableButton(ID_PrintReport, False)
        
        # Активность кнопки 'Помощь' 
        helpinfo.EnableButton(ID_Help, True)

#*********************************************************************************************************
# Открываем файл для просмотра
   
    def OnOpenFileRibbon(self, event):
        
        wildcard = "Text file (*.txt)|*.txt|"     \
                   "Python source (*.py)|*.py|"     \
                   "MS Office documents (*.doc)|*.doc|" \
            "All files (*.*)|*.*"     
  
        # Создаем окно
        frame = wx.Frame(None, title="Открываем файл", size=(800, 700))
#---------------------------------------------------------------------------------------------

  # добавить сюда меню (пункты сохранить, сохранить как и выход)

#----------------------------------------------------------------------------------------------
        
        # Создаем окно многострочного текста и открываем его во фрейме
        self.my_text = wx.TextCtrl(frame, style=wx.TE_MULTILINE)
        
        self.my_text.SetFont(wx.Font(FONTSIZE, wx.FONTFAMILY_TELETYPE, wx.NORMAL, wx.NORMAL))
       
        # Выбираем текущую рабочую директорию
        self.currentDirectory = os.getcwd()
        
        # Открываем диалог и выбираем файл        
        dialog = wx.FileDialog(None, message="Открытие документа", defaultDir= self.currentDirectory, 
                            defaultFile="", wildcard=wildcard, style=wx.FD_OPEN)

        # Show the dialog and retrieve the user response. If it is the OK response, 
        # process the data.
        if dialog.ShowModal() == wx.ID_OK:
            # This returns the file that was selected
            path = dialog.GetPath()

        # Открываем файл только для чтения
            fileopen = open(path, 'r')
            self.my_text.SetValue(fileopen.read())
            fileopen.close()  
    
        # Показываем окно
        frame.Show()
#-------------------------------------------------------------------------------------------------------------
# Сохраняем файл как 

    def OnSaveAsFileRibbon(self, event):

        """
        Create and show the Save FileDialog
        """
        wildcard = "Text source (*.txt)|*.txt|" \
            "All files (*.*)|*.*"
        
        self.currentDirectory = os.getcwd()
        
        dlg = wx.FileDialog(self, message="Сохранение документа", defaultDir=self.currentDirectory, 
                            defaultFile="", wildcard=wildcard, style=wx.FD_SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            report = open(path, "w") 

            report.close()

        dlg.Destroy()

#---------------------------------------------------------------------------------------------------------------        

# Открываем окно Ввода данных

    def OnOpenNewWindow(self, event):
        """ открываем окно ввода данных """
        
        NewWindow = NotebookFrame(None)
        NewWindow.Show()
#---------------------------------------------------------------------------------------------------------------
# Запускаем расчет

    def OnRunCalculation(self, event):
        """ запускаем расчет """       
        
        dialog = MyProgressDialog()
        dialog.Show()
        dialog.Destroy()
        
########################################################  
#-------------- 'Создаем отчет' -----------------------#
########################################################

    def OnCreateReport(self, event):
        
        """ создаем отчет """
  
        wildcard = "Text source (*.txt)|*.txt|" \
            "All files (*.*)|*.*"
        self.currentDirectory = os.getcwd()
        dlg = wx.FileDialog(self, message="Создание отчета", defaultDir=self.currentDirectory, 
                            defaultFile="", wildcard=wildcard, style=wx.FD_SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            report = open(path, "w") 

# Создаем заголовочный файл

        # Устанавливаем дату и время
        date = strftime("%a %d-%m-%y %H:%M:%S")

        # Добавляем линию конеца заголовочного файла
        div = '********************** Конец заголовка ***************************'

        # Записываем заголовочные данные в файл 
        
        report.write('\n Наименование: Отчет')
        
        report.write('\n')
    
#         self.multiline = """\n Программа позволяет проводится теплотехнический расчет работы нефтяной скважины по данным технологической анкеты.
# \n Вводятся начальные данные по скважине. Строится геотерма скважины. Определяются теплопотери в грунт.
# \n Строится термограмма скважины с учетом характера движения жидкости. Определяется глубина отложения
# \n парафинов и проводится расчет параметров электрического кабеля.

# \n Выходными параметрами программы являются: \n
# - длины обогрева (горячая и холодная зона) \n
# - электротехнические параметры кабеля (мощность обогрева, ток, напряжение) \n
# - температура жилы и оболочки \n """
        
#         report.write('\n Описание: Программа расчета электрического обогрева нефтяных скважин с ЭЦН.\n %s' % self.multiline)
        report.write('\n Описание: Расчет электрического обогрева нефтяных скважин с ЭЦН.\n ')
        
        report.write('\n')
        
        report.write('\n Разработчик: ООО ОКБ "Гамма"')
        
        report.write('\n')
        
        report.write('\n Дата расчета: ' + date)
        
        report.write('\n')
        
        report.write('\n Расчет скважины №:' )
        
        report.write('\n')
    
        report.write('\n' + div * 1 + '\n')
        
        report.write('\n')     
        
#-------------------------------------------------------------------------------------------------------

        report.write('\n В этом месте будут находиться систематизированные результаты расчета')

    
               # сюда добавляем строчки значений искомых величин после расчета


#----------------------------------------------------------------------
        # Закрываем окно с данными

        button2.Disable()
        
        dlg.Destroy()
    
        # Show message box that's all ok 
        wx.MessageBox(u'Отчет успешно создан!', u'Сообщение', wx.OK | wx.ICON_INFORMATION)
        
##################################################################################################################33

# Открываем просмотрщик

    def OnOpenViewer(self, event):
        """ открываем просмотрщик """
        
        frame = Viewer(None, 'Файловый просмотрщик')
        frame.Show()
    
#----------------------------------------------------------------------------------------------------------    
# Открываем окно рисования графика

    def OnPlotGraph(self, event):
        """ строим график """
        
        fig = PlotFrame()
        fig.Show(True)

#--------------------------------------------------------------------------------------------------------
# Открываем окно печати

    def onPrintDocument(self, event):
        """ выводим документ на печать """
        
        frame = PrintFrameworkSample()
        frame.Show()
    
#---------------------------------------------------------------------------------------------------------  
# Открываем окно Помощи

    def onOpenHelpWindow(self, event):
        """ открываем окно справки """
        
        helpwindow = HelpWindow(None)
        helpwindow.Show() 
        
##################################################################################################
#----------------------------------------- Входные данные ---------------------------------------#
##################################################################################################
# Создаем вкладки

class TabPanelOne(wx.Panel):
    """
    Первая вкладка 
    
    """
#--------------------------------------------------------------------------------------------
# Размещаем на панели текст и поля для ввода 

    def __init__(self, parent):
        
        """ """
  
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        
        # Объявляем глобальные переменные
        global txt14, txt15, txt16, txt17, txt18, txt19
        
#---- Первое поле ------- 

        # Задаем сайзеры для первого поля
        FirstSizer_vert = wx.BoxSizer(wx.VERTICAL)
        FirstSizer_hor1 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Добавляем небольшой отступ сверху
        FirstSizer_vert.AddSpacer(10)
        
        # Задаем параметры шрифта
        font = wx.Font(13, wx.ROMAN, wx.ITALIC, wx.BOLD, False, u'Consolas')
        # Рисуем название поля
        text = wx.StaticText(self, wx.ID_ANY, "Для скважин с установленным УЭЦН")
        FirstSizer_vert.Add(text, flag = wx.ALIGN_CENTER)
        # Применяем шрифт
        text.SetFont(font)
        
        # Добавляем небольшой отступ сверху
        FirstSizer_vert.AddSpacer(60)
       
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor1)
        
        # Добавляем пустых строк слева
        FirstSizer_hor1.AddSpacer(20)
          
        font14 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text14 = wx.StaticText(self, wx.ID_ANY, "Глубина забоя, м")
        text14.SetFont(font14)
        text14.SetForegroundColour('black')
        self.Show(True)
        
        # Рисуем поля ввода значений
        txt14 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        # Устанавливаем фон поля
#         self.txt14.SetBackgroundColour("#FFFFE8")

        # Рисуем поля
        FirstSizer_hor1.Add(text14, flag = wx.ALL, border = 10)
        FirstSizer_hor1.Add(txt14, flag = wx.ALL, border = 10)
        
#------ Второе поле ----------

        # Сайзер второго поля
        FirstSizer_hor2 = wx.BoxSizer(wx.HORIZONTAL)
    
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor2)
        # Добавляем пустых строк слева
        FirstSizer_hor2.AddSpacer(20)

        font15 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text15 = wx.StaticText(self, wx.ID_ANY, "Длина эксплуатационной колонны (с хвостовиком), м")
        text15.SetFont(font15)
        text15.SetForegroundColour('black')
        self.Show(True)
        
        # Рисуем поля ввода значений
        txt15 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Рисуем поля
        FirstSizer_hor2.Add(text15, flag = wx.ALL, border = 10)
        FirstSizer_hor2.Add(txt15, flag = wx.ALL, border = 10)
        
#-------- Третье поле --------

        # Сайзер третьего поля
        FirstSizer_hor3 = wx.BoxSizer(wx.HORIZONTAL)
    
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor3)
        
        # Добавляем пустых строк слева
        FirstSizer_hor3.AddSpacer(20)

        font16 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text16 = wx.StaticText(self, wx.ID_ANY, "Диаметр эксплуатационной колонны, мм")
        text16.SetFont(font16)
        text16.SetForegroundColour('black')
        self.Show(True)
       
        txt16 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        txt16.Bind(wx.EVT_TEXT, self.onCheckThirdField)
        
        FirstSizer_hor3.Add(text16, flag = wx.ALL, border = 10)
        FirstSizer_hor3.Add(txt16, flag = wx.ALL, border = 10)
        
        # Задаем отступ сверху
        FirstSizer_vert.AddSpacer(40)

#-------- Четвертое поле -----------

        # Сайзер четвертого поля
        FirstSizer_hor4 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor4)
       
        # Задаем отступ слева
        FirstSizer_hor4.AddSpacer(120)

        font17 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text17 = wx.StaticText(self, wx.ID_ANY, "Длина колонны НКТ, м")
        text17.SetFont(font17)
        text17.SetForegroundColour('black')
        self.Show(True)
        
        txt17 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        FirstSizer_hor4.Add(text17, flag = wx.ALL, border = 10)
        FirstSizer_hor4.Add(txt17, flag = wx.ALL, border = 10)

#---------- Пятое поле --------

        # Сайзер поля
        FirstSizer_hor5 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor5)
       
        # Задаем отступ слева
        FirstSizer_hor5.AddSpacer(120)

        font18 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text18 = wx.StaticText(self, wx.ID_ANY, "Диаметр колонны НКТ, м")
        text18.SetFont(font18)
        text18.SetForegroundColour('black')
        self.Show(True)
        
        txt18 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        FirstSizer_hor5.Add(text18, flag = wx.ALL, border = 10)
        FirstSizer_hor5.Add(txt18, flag = wx.ALL, border = 10)
        
#---------- Еще поле забыли -------------

    # Сайзер поля
        FirstSizer_hor9 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor9)
       
        # Задаем отступ слева
        FirstSizer_hor9.AddSpacer(120)

        font19 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text19 = wx.StaticText(self, wx.ID_ANY, "Статический уровень флюида в скважине, м")
        text19.SetFont(font18)
        text19.SetForegroundColour('black')
        self.Show(True)
        
        txt19 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        FirstSizer_hor9.Add(text19, flag = wx.ALL, border = 10)
        FirstSizer_hor9.Add(txt19, flag = wx.ALL, border = 10)


#-------- Добавляем еще одно поле ----------
     
        # Задаем отступ сверху
        FirstSizer_vert.AddSpacer(10)

        # Сайзер поля
        FirstSizer_hor6 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor6)
       
        # Задаем отступ слева
        FirstSizer_hor6.AddSpacer(120)

        add_font = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        add_text = wx.StaticText(self, wx.ID_ANY, "Толщина стенки НКТ, м")
        add_text.SetFont(add_font)
        add_text.SetForegroundColour('black')
        self.Show(True)
        
        add = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        FirstSizer_hor6.Add(add_text, flag = wx.ALL, border = 10)
        FirstSizer_hor6.Add(add, flag = wx.ALL, border = 10)

        # Задаем отступ сверху
        FirstSizer_vert.AddSpacer(50)
        
#----------- Шестое поле ----------

        # Сайзер поля
        FirstSizer_hor7 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor7)
       
        # Задаем отступ слева
        FirstSizer_hor7.AddSpacer(220)

        font62 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text62 = wx.StaticText(self, wx.ID_ANY, "Напряжение питания ПЭД, В")
        text62.SetFont(font62)
        text62.SetForegroundColour('black')
        self.Show(True)
       
        txt62 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        FirstSizer_hor7.Add(text62, flag = wx.ALL, border = 10)
        FirstSizer_hor7.Add(txt62, flag = wx.ALL, border = 10)

#---------- Седьмое поле ---------

        # Сайзер поля
        FirstSizer_hor8 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor8)
       
        # Задаем отступ слева
        FirstSizer_hor8.AddSpacer(220)

        font63 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text63 = wx.StaticText(self, wx.ID_ANY, "Частота питающего напряжения, Гц")
        text63.SetFont(font63)
        text63.SetForegroundColour('black')
        self.Show(True)
       
        txt63 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        FirstSizer_hor8.Add(text63, flag = wx.ALL, border = 10)
        FirstSizer_hor8.Add(txt63, flag = wx.ALL, border = 10)

#------ Восьмое поле -----------

        # Сайзер поля
        FirstSizer_hor9 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Добавляем горизонтальный сайзер в вертикальный
        FirstSizer_vert.Add(FirstSizer_hor9)
       
        # Задаем отступ слева
        FirstSizer_hor9.AddSpacer(220)

        font64 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text64 = wx.StaticText(self, wx.ID_ANY, "Ток потребления ПЭД, А")
        text64.SetFont(font64)
        text64.SetForegroundColour('black')
        self.Show(True)
        
        txt64 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        FirstSizer_hor9.Add(text64, flag = wx.ALL, border = 10)
        FirstSizer_hor9.Add(txt64, flag = wx.ALL, border = 10)

#---------------------------------------------------------------------------------------------------------------
        # Обрабатываем событие (меняем подсветку полей ввода)
#         txt14.Bind(wx.EVT_SET_FOCUS, self.FirstFieldOn)
#         self.txt15.Bind(wx.EVT_SET_FOCUS, self.SecondFieldOn)
#         self.txt16.Bind(wx.EVT_SET_FOCUS, self.ThirdFieldOn)
#         self.txt17.Bind(wx.EVT_SET_FOCUS, self.FourthFieldOn)
#         self.txt18.Bind(wx.EVT_SET_FOCUS, self.FifthFieldOn)
#         self.txt62.Bind(wx.EVT_SET_FOCUS, self.SixthFieldOn)
#         self.txt63.Bind(wx.EVT_SET_FOCUS, self.SeventhFieldOn)
#         self.txt64.Bind(wx.EVT_SET_FOCUS, self.EighthFieldOn)
#--------------------------------------------------------------------------------------------------------------------                
        
        # Рисуем резделительную линию
        wx.StaticLine(self, pos=(30, 670), size=(950,2))
        
            
        # Рисуем кнопку 'следующая'
        self.btn_next1 = wx.Button(self, wx.ID_OK, label="следующая>", pos=(500, 700))
        
        # Делаем ее видимой
#         self.btn_next1.Enable()
        
        # Переключаемся на другую вкладку по нажатию кнопки
        self.Bind(wx.EVT_BUTTON, self.OnCheckFirstTab, self.btn_next1)
       
        # Рисуем кнопку закрыть
        self.btn_close1 = wx.Button(self, wx.ID_OK, label="Закрыть", pos=(650, 700))
        
        # При нажатии закрываем окно
        self.btn_close1.Bind(wx.EVT_BUTTON, self.onCloseDataTabOne, self.btn_close1)
        
        """ после проверки заполнения всех полей на первой вкладке (в случае заполнения всех пустых полей)
            переходим к заполнению полей следующей вкладки
        """
        self.SetSizer(FirstSizer_vert)
        self.Layout()
        
#*******************************************************************************************************
          # Доп функция - пока отключена
#-------------------------------------------------------------------------------------------------
# Управляем подсветкой полей ввода на первой вкладке

#     def FirstFieldOn(self, event):
#         """  """
#         # Устанавливаем белый фон для остальных полей
#         self.txt15.SetBackgroundColour("white")
#         self.txt15.Refresh()
        
#         self.txt16.SetBackgroundColour("white")
#         self.txt16.Refresh()
        
#         # Устанавливаем желтый фон для текущего поля
#         self.txt14.SetBackgroundColour("#FFFFE8")
#         self.txt14.SetFocus()
#         self.txt14.Refresh()
         
#     def SecondFieldOn(self, event):
#         """  """
#         # Устанавливаем белый фон для остальных полей
#         self.txt14.SetBackgroundColour("white")
#         self.txt14.Refresh()
        
#         self.txt16.SetBackgroundColour("white")
#         self.txt16.Refresh()
        
#         # Устанавливаем желтый фон для текущего поля
#         self.txt15.SetBackgroundColour("#FFFFE8")
#         self.txt15.Refresh()
    
    
#     def ThirdFieldOn(self, event):
#         """  """
#         # Устанавливаем белый фон для остальных полей
#         self.txt15.SetBackgroundColour("white")
#         self.txt15.Refresh()
        
#         self.txt14.SetBackgroundColour("white")
#         self.txt14.Refresh()
        
#         #  Устанавливаем желтый фон для текущего поля
#         self.txt16.SetBackgroundColour("#FFFFE8")
#         self.txt16.Refresh()
         
#     def FourthFieldOn(self, event):
#         """  """
#         #
#         self.txt14.SetBackgroundColour("white")
#         self.txt14.Refresh()
        
#         #
#         self.txt15.SetBackgroundColour("#FFFFE8")
#         self.txt15.Refresh()   

#----------------------------------------------------------------------------------------------------------------        
# Закрываем окно 

    def onCloseDataTabOne(self, event):
        """ Закрываем ноутбук с данными """      
  
        self.GetTopLevelParent().Destroy()
    
#-----------------------------------------------------------------------------------------------------------------
# Проверяем заполнение всех поей вкладки

    def OnCheckFirstTab(self, event):
        
        """ проверяем все ли поля заполнены """
             
        # Контрольные значения
        h_bhole = txt14.GetValue()
        h_obs = txt15.GetValue()
        d_vnesh_obs = txt16.GetValue()
        h_nkt  = self.txt17.GetValue()
        d_vnesh_nkt = self.txt18.GetValue()
        h_stat = self.txt19.GetValue()
        u_ESP = self.txt62.GetValue()
        f_ESP = self.txt63.GetValue()
        i_ESP = self.txt64.GetValue()
        
        if h_bhole and h_obs and d_vnesh_obs != '':
            
            # Переходим на следующую вкладку
            self.notebook = self.GetParent()
            self.notebook.SetSelection(1)
            
            # Если все поля заполнены - делаем кнопку 'следующая' неактивной
            self.btn_next1.Disable()
           
        else:
            # Выводим сообщение
            wx.MessageBox(u'Чтобы сохранить данные, пожалуйста, заполните все пустые поля', 'Ошибка', wx.OK | wx.ICON_ERROR)
            
#*************************************************************************************************






#--------------------------------------------------------------------------------------------------------
# Проверка поля на соответствие значения 
    
    def onCheckThirdField(self, event):
        """ Проверяем поле """
        
        # Значение поля равно
        d_vnesh_obs = txt16.GetValue()
        
        # Делаем проверку
        if d_vnesh_obs >= '140' and d_vnesh_obs <= '180' :
            
            # Если значение в диапазоне, задаем черный цвет значения
            txt16.SetForegroundColour(wx.BLACK)
            txt16.Refresh()
            txt16.SetToolTip(wx.ToolTip(""))
        
        else:
            
            # Если значение не в диапазоне, задаем красный цвет значения
            txt16.SetForegroundColour(wx.RED)
            txt16.Refresh()
            # Выводим предупреждающую надпись    
            txt16.SetToolTip(wx.ToolTip("Внимание ошибка! Значение находится вне диапазона"))
#----------------------------------------------------------------------------------------------------------            

            
########################################################################
class TabPanelTwo(wx.Panel):
    """
    Вторая вкладка 
    
    """
    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        
        # Объявляем глобальные переменные
        global txt21, txt22, txt23, txt24
        
# ------- Первое поле -----------

        # Задаем сайзеры (вертикальный и горизонтальный)
        SecondSizer_vert = wx.BoxSizer(wx.VERTICAL)
        SecondSizer_horiz1 = wx.BoxSizer(wx.HORIZONTAL) 
        
        # Добавляем пустых строк сверху и пробелов слева
        SecondSizer_vert.AddSpacer(60)
        SecondSizer_horiz1.AddSpacer(100)
        
        # Размещаем горизонтальный сайзер в вертикальном (название поля и его значение в одной строке)
        SecondSizer_vert.Add (SecondSizer_horiz1)
        
        font21 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text21 = wx.StaticText(self, wx.ID_ANY, "Температура нефтяного пласта, град. С")
        text21.SetFont(font21)
        text21.SetForegroundColour('black')
        self.Show(True)
       
        # Рисуем поле со значением
        txt21 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SecondSizer_horiz1.Add(text21, flag = wx.ALL, border = 10)
        SecondSizer_horiz1.Add(txt21, flag = wx.ALL, border = 10)
        
#------- Второе поле ---------
        
        # Задаем сайзер 
        SecondSizer_horiz2 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Размещаем горизонтальный сайзер в вертикальном
        SecondSizer_vert.Add (SecondSizer_horiz2)
        
        # Добавляем пробелов
        SecondSizer_horiz2.AddSpacer(100)
              
        # Задаем параметры шрифта
        font22 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas') 
        # Выводим название пункта
        text22 = wx.StaticText(self, wx.ID_ANY, "Глубина вечномерзлых грунтов, м")
        # Устанавливаем шрифт
        text22.SetFont(font22)
        # Задаем цвет шрифта
        text22.SetForegroundColour('black')
        # Делаем надпись видимой
        self.Show(True)
        
        # Выводим поле значения
        txt22 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
   
        # Задаем дистанцию между текстом и полем 
        SecondSizer_horiz2.Add(text22, flag = wx.ALL, border = 10)
        SecondSizer_horiz2.Add(txt22, flag = wx.ALL, border = 10)
    
# ----- Третье поле ---------
        
        # Задаем сайзер для расстояния между строк
        SecondSizer_horiz3 = wx.BoxSizer(wx.HORIZONTAL)
        
        # Размещаем горизонтальный сайзер в вертикальном
        SecondSizer_vert.Add (SecondSizer_horiz3)
             
        # Добавляем пробелов
        SecondSizer_horiz3.AddSpacer(100)
       
        # Задаем параметры шрифта
        font23 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        # Выводим название пункта
        text23 = wx.StaticText(self, wx.ID_ANY, "Средняя температура наиболее холодного месяца, град. С")
        # Устанавливаем шрифт
        text23.SetFont(font23)
        
        text23.SetForegroundColour('black')
        self.Show(True)
    
        # Рисуем поле для ввода
        txt23 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Расстояние между текстом и полем
        SecondSizer_horiz3.Add(text23, flag = wx.ALL, border = 10)
        SecondSizer_horiz3.Add(txt23, flag = wx.ALL, border = 10)
        
# ---- Четвертое поле -----

        # Интервал между вторым и третьим полем 
        SecondSizer_horiz4 = wx.BoxSizer(wx.HORIZONTAL)
        
        SecondSizer_vert.Add (SecondSizer_horiz4)
        
        # Добавляем слева пустых строк
        SecondSizer_horiz4.AddSpacer(100)

        font24 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text24 = wx.StaticText(self, wx.ID_ANY, "Максимальная температура наиболее теплого месяца, град. С")
        text24.SetFont(font24)
        text24.SetForegroundColour('black')
        self.Show(True)
       
        txt24 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
      
        # Расстояние между названием и полем
        SecondSizer_horiz4.Add(text24, flag = wx.ALL, border = 10)
        SecondSizer_horiz4.Add(txt24, flag = wx.ALL, border = 10)
        
        StaticLine = wx.StaticLine(self, pos=(30, 270), size=(950,2))

#------- Кнопки --------
          
        self.btn_next2 = wx.Button(self, wx.ID_OK, label="следующая>", pos=(500, 700))
        
#         sizer_nextButton.Add(self.btn_next2, flag = wx.ALL, border = 500)

#         self.btn_next2.Enable()

        self.Bind(wx.EVT_BUTTON, self.OnCheckSecondTab, self.btn_next2)
    
    
        self.btn_close2 = wx.Button(self, wx.ID_OK, label="Закрыть", pos=(650, 700))
        
        self.btn_close2.Bind(wx.EVT_BUTTON, self.onCloseDataTabTwo, self.btn_close2)
        
        
        self.SetSizer(SecondSizer_vert)
        self.Layout()
#-----------------------------------------------------------------------------------------------------------------        
# Закрываем окно ноутбука

    def onCloseDataTabTwo(self, event):
        """ Закрываем ноутбук с данными """      
  
        self.GetTopLevelParent().Destroy()
    
#-----------------------------------------------------------------------------------------------------------------
# Возвращаемся назад на перыдущую вкладку
#     def ReturnOnFirstTab(self, event):
        
#         # Переходим на следующую вкладку
#         self.notebook = self.GetParent()
#         self.notebook.SetSelection(0)
        
#         self.btn_next1.Enable()
        
#         # Контрольные значения
#         self.h_bhole = self.txt14.GetValue()
#         self.h_obs = self.txt15.GetValue()
#         self.d_vnesh_obs = self.txt16.GetValue()

        
#         if self.h_bhole and self.h_obs and self.d_vnesh_obs != '':
            
#             # Переходим на следующую вкладку
#             self.notebook = self.GetParent()
#             self.notebook.SetSelection(1)
            
#             # Если все поля заполнены - делаем кнопку 'следующая' неактивной
#             self.btn_next1.Disable()
           
#         else:
#             # Выводим сообщение
#             wx.MessageBox(u'Чтобы сохранить данные, пожалуйста, заполните все пустые поля', 'Ошибка', wx.OK | wx.ICON_ERROR)

#-----------------------------------------------------------------------------------------------------------------
# Переходим на третью вкладку
    def OnCheckSecondTab(self, event):
        
        # Контрольные значения
        t_bhole = txt21.GetValue()
        h_ice = txt22.GetValue()
        t_month = txt23.GetValue()
        t_maxh = txt24.GetValue()

        
        if t_bhole and h_ice and t_month and t_maxh != '':
            
            # Переходим на следующую вкладку
            self.notebook = self.GetParent()
            self.notebook.SetSelection(2)
            
            # Если все поля заполнены - делаем кнопку 'следующая' неактивной
            self.btn_next2.Enable()
            
             # Делаем вкладку неактивной
#             self.notebook.EnableTab(1, False)
           
        else:
            # Выводим сообщение
            wx.MessageBox(u'Чтобы сохранить данные, пожалуйста, заполните все пустые поля', 'Ошибка', wx.OK | wx.ICON_ERROR)
            
#-----------------------------------------------------------------------------------------------------------------

########################################################################
class TabPanelThree(wx.Panel):
    """
    Третья вкладка
    
    """
#----------------------------------------------------------------------
    def __init__(self, parent):
        """"""
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        
        # Объявляем глобальные переменные
        global txt31, txt32, txt33, txt34, txt35
        
#---------- Первое поле --------------
        
        # Задаем сайзеры (вертикальный и горизонтальный)
        ThirdSizer_vert = wx.BoxSizer(wx.VERTICAL)
        ThirdSizer_horiz1 = wx.BoxSizer(wx.HORIZONTAL) 
        
        ThirdSizer_vert.AddSpacer(60)
        ThirdSizer_horiz1.AddSpacer(60)
        
        ThirdSizer_vert.Add (ThirdSizer_horiz1)
        
        font31 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text31 = wx.StaticText(self, wx.ID_ANY, "Плотность нефтяного флюида в условиях пласта, кг/м3")
        text31.SetFont(font31)
        text31.SetForegroundColour('black')
        self.Show(True)
        
        txt31 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
       
        # Задаем дистанцию между текстом и полем 
        ThirdSizer_horiz1.Add(text31, flag = wx.ALL, border = 10)
        ThirdSizer_horiz1.Add(txt31, flag = wx.ALL, border = 10)
        
#--------- Второе поле ----------                

        ThirdSizer_horiz2 = wx.BoxSizer(wx.HORIZONTAL) 

        ThirdSizer_vert.Add (ThirdSizer_horiz2)
        
        # Добавляем пробелов
        ThirdSizer_horiz2.AddSpacer(80)
    
        font32 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text32 = wx.StaticText(self, wx.ID_ANY, "Вязкость нефтяного флюида, мПа*с")
        text32.SetFont(font32)
        text32.SetForegroundColour('black')
        self.Show(True)
        
        txt32 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        ThirdSizer_horiz2.Add(text32, flag = wx.ALL, border = 10)
        ThirdSizer_horiz2.Add(txt32, flag = wx.ALL, border = 10)
        
#--------- Третье поле ----------- 

        ThirdSizer_horiz3 = wx.BoxSizer(wx.HORIZONTAL) 

        ThirdSizer_vert.Add (ThirdSizer_horiz3)
        
        # Добавляем пробелов
        ThirdSizer_horiz3.AddSpacer(100)
       
        font33 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text33 = wx.StaticText(self, wx.ID_ANY, "Давление насыщения в условиях пласта, МПа")
        text33.SetFont(font33)
        text33.SetForegroundColour('black')
        self.Show(True)
        
        txt33 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        ThirdSizer_horiz3.Add(text33, flag = wx.ALL, border = 15)
        ThirdSizer_horiz3.Add(txt33, flag = wx.ALL, border = 15)
        
#--------- Четвертое поле ----------- 

        ThirdSizer_horiz4 = wx.BoxSizer(wx.HORIZONTAL) 

        ThirdSizer_vert.Add (ThirdSizer_horiz4)
        
        # Добавляем пробелов
        ThirdSizer_horiz4.AddSpacer(80)

        font34 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text34 = wx.StaticText(self, wx.ID_ANY, "Температурный коэффициент давления насыщения")
        text34.SetFont(font34)
        text34.SetForegroundColour('black')
        self.Show(True)
        
        txt34 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        ThirdSizer_horiz4.Add(text34, flag = wx.ALL, border = 15)
        ThirdSizer_horiz4.Add(txt34, flag = wx.ALL, border = 15)
        
#--------- Пятое поле -----------

        ThirdSizer_horiz5 = wx.BoxSizer(wx.HORIZONTAL) 

        ThirdSizer_vert.Add (ThirdSizer_horiz5)
        
        # Добавляем пробелов
        ThirdSizer_horiz5.AddSpacer(100)
        
        font35 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text35 = wx.StaticText(self, wx.ID_ANY, "Газосодержание пластовой жидкости, м3/м3")
        text35.SetFont(font35)
        text35.SetForegroundColour('black')
        self.Show(True)
        
        txt35 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        ThirdSizer_horiz5.Add(text35, flag = wx.ALL, border = 15)
        ThirdSizer_horiz5.Add(txt35, flag = wx.ALL, border = 15)
        
#-------------------------------------------------------------------------------------------------------
        
        wx.StaticLine(self, pos=(30, 400), size=(950,2))
        
#         self.btn_previous2 = wx.Button(self, wx.ID_OK, label="<<предыдущая", pos=(350, 710))
        self.btn_next3 = wx.Button(self, wx.ID_OK, label="следующая>", pos=(500, 700))
        self.btn_next3.Enable()
        
        self.btn_close3 = wx.Button(self, wx.ID_OK, label="Закрыть", pos=(650, 700))
        self.btn_close3.Bind(wx.EVT_BUTTON, self.onCloseDataTabThree, self.btn_close3)
        
        self.SetSizer(ThirdSizer_vert)
#-----------------------------------------------------------------------------------------------------------------        
# Закрываем окно ноутбука

    def onCloseDataTabThree(self, event):
        """ Закрываем ноутбук с данными """      
  
        self.GetTopLevelParent().Destroy()
#-----------------------------------------------------------------------------------------------------------------

    # Переходим на четвертую вкладку
    def OnCheckThirdTab(self, event):
        
        # Контрольные значения
        ro = txt31.GetValue()
        visc_plast = txt32.GetValue()
        pn_plast = txt33.GetValue()
        tkpn = txt34.GetValue()
        g_plast = txt35.GetValue()

        
        if ro and visc_plast and pn_plast and tkpn and g_plast != '':
            
            # Переходим на следующую вкладку
            self.notebook = self.GetParent()
            self.notebook.SetSelection(3)
            
            # Если все поля заполнены - делаем кнопку 'следующая' неактивной
            self.btn_next2.Enable()
            
             # Делаем вкладку неактивной
#             self.notebook.EnableTab(2, False)
           
        else:
            # Выводим сообщение
            wx.MessageBox(u'Чтобы сохранить данные, пожалуйста, заполните все пустые поля', 'Ошибка', wx.OK | wx.ICON_ERROR)
            
#-----------------------------------------------------------------------------------------------------------------
        
########################################################################
class TabPanelFour(wx.Panel):
    """
    Четвертая вкладка
    """
    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        
        # Объявляем глобальные переменные
        global txt41, txt42, txt43, txt44, txt45, txt46, txt47, txt48, txt49, txt410
        
#---------- Первое поле --------------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_vert = wx.BoxSizer(wx.VERTICAL)
        FourthSizer_horiz1 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_vert.AddSpacer(40)
        FourthSizer_horiz1.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz1)
        
        font41 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text41 = wx.StaticText(self, wx.ID_ANY, "Дебит по жидкости (с чистой НКТ), м3/сут")
        text41.SetFont(font41)
        text41.SetForegroundColour('black')
        self.Show(True)
             
        txt41 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz1.Add(text41, flag = wx.ALL, border = 15)
        FourthSizer_horiz1.Add(txt41, flag = wx.ALL, border = 15)
        
#---------- Второе поле ---------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz2 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz2.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz2)
                
        font42 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text42 = wx.StaticText(self, wx.ID_ANY, "Дебит по нефти, т/сут")
        text42.SetFont(font42)
        text42.SetForegroundColour('black')
        self.Show(True)
        
        txt42 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz2.Add(text42, flag = wx.ALL, border = 15)
        FourthSizer_horiz2.Add(txt42, flag = wx.ALL, border = 15)
        
#---------- Третье поле ---------
        
        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz3 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz3.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz3)

        font43 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text43 = wx.StaticText(self, wx.ID_ANY, "Газовый фактор, м3/м3")
        text43.SetFont(font43)
        text43.SetForegroundColour('black')
        self.Show(True)
        
        txt43 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz3.Add(text43, flag = wx.ALL, border = 15)
        FourthSizer_horiz3.Add(txt43, flag = wx.ALL, border = 15)
        
#---------- Четвертое поле ---------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz4 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz4.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz4)
        
        font44 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text44 = wx.StaticText(self, wx.ID_ANY, "Содержание воды, массовая доля, %")
        text44.SetFont(font44)
        text44.SetForegroundColour('black')
        self.Show(True)

        txt44 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz4.Add(text44, flag = wx.ALL, border = 15)
        FourthSizer_horiz4.Add(txt44, flag = wx.ALL, border = 15)
        
#---------- Пятое поле ---------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz5 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz5.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz5)
        
        font45 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text45 = wx.StaticText(self, wx.ID_ANY, "Динамический уровень, м")
        text45.SetFont(font45)
        text45.SetForegroundColour('black')
        self.Show(True)
        
        txt45 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
         # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz5.Add(text45, flag = wx.ALL, border = 15)
        FourthSizer_horiz5.Add(txt45, flag = wx.ALL, border = 15)
        
#---------- Шестое поле ---------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz6 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz6.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz6)
        

        font46 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text46 = wx.StaticText(self, wx.ID_ANY, "Давление на устье, атм")
        text46.SetFont(font46)
        text46.SetForegroundColour('black')
        self.Show(True)
        
        txt46 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz6.Add(text46, flag = wx.ALL, border = 15)
        FourthSizer_horiz6.Add(txt46, flag = wx.ALL, border = 15)

#---------- Седьмое поле ---------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz7 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz7.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz7)
    
        font47 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text47 = wx.StaticText(self, wx.ID_ANY, "Температура жидкости на выходе из скважины, град. С")
        text47.SetFont(font47)
        text47.SetForegroundColour('black')
        self.Show(True)
        
        txt47 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz7.Add(text47, flag = wx.ALL, border = 15)
        FourthSizer_horiz7.Add(txt47, flag = wx.ALL, border = 15)

#---------- Восьмое поле ---------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz8 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz8.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz8)
        
        font48 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text48 = wx.StaticText(self, wx.ID_ANY, "Минимальный дебит по жидкости, м3/сут")
        text48.SetFont(font48)
        text48.SetForegroundColour('black')
        self.Show(True)
        
        txt48 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz8.Add(text48, flag = wx.ALL, border = 15)
        FourthSizer_horiz8.Add(txt48, flag = wx.ALL, border = 15)

#---------- Девятое поле ---------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz9 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz9.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz9)

        font49 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text49 = wx.StaticText(self, wx.ID_ANY, "Глубина спуска скребка при механической очистке, м")
        text49.SetFont(font48)
        text49.SetForegroundColour('black')
        self.Show(True)
        
        txt49 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz9.Add(text49, flag = wx.ALL, border = 15)
        FourthSizer_horiz9.Add(txt49, flag = wx.ALL, border = 15)
        
#---------- Десятое поле ---------

        # Задаем сайзеры (вертикальный и горизонтальный)
        FourthSizer_horiz10 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FourthSizer_horiz10.AddSpacer(40)
        
        FourthSizer_vert.Add (FourthSizer_horiz10)

        font410 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text410 = wx.StaticText(self, wx.ID_ANY, "Максимальная глубина отложения АСПО (по данным КРС), м")
        text410.SetFont(font410)
        text410.SetForegroundColour('black')
        self.Show(True)
       
        txt410 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FourthSizer_horiz10.Add(text410, flag = wx.ALL, border = 15)
        FourthSizer_horiz10.Add(txt410, flag = wx.ALL, border = 15)
#------------------------------------------------------------------------------

        wx.StaticLine(self, pos=(30, 650), size=(950,2))
        
#         self.btn_previous3 = wx.Button(self, wx.ID_OK, label="<<предыдущая", pos=(350, 710))
        self.btn_next4 = wx.Button(self, wx.ID_OK, label="следующая>", pos=(500, 700))
        self.btn_next4.Enable()
        
        self.btn_close4 = wx.Button(self, wx.ID_OK, label="Закрыть", pos=(650, 700))
        self.btn_close4.Bind(wx.EVT_BUTTON, self.onCloseDataTabFour, self.btn_close4)
        
        self.SetSizer(FourthSizer_vert)

#-----------------------------------------------------------------------------------------------------------------        
# Закрываем окно ноутбука

    def onCloseDataTabFour(self, event):
        """ Закрываем ноутбук с данными """      
  
        self.GetTopLevelParent().Destroy()
    
#-----------------------------------------------------------------------------------------------------------------    

# Переходим на пятую вкладку
    def OnCheckFourthTab(self, event):
        
        # Контрольные значения
        nomdebit = txt41.GetValue()
        debit_oil  = txt42.GetValue()
        g = txt43.GetValue()
        water = txt44.GetValue()
        h_din = txt45.GetValue()
        p_wellhead = txt46.GetValue()
        t_wellhead = txt47.GetValue()
        debit = txt48.GetValue()
        scraper = txt49.GetValue()
        h_aspo = txt410.GetValue()
        
        if nomdebit and debit_oil and g != '':
            
            # Переходим на следующую вкладку
            self.notebook = self.GetParent()
            self.notebook.SetSelection(4)
            
            # Если все поля заполнены - делаем кнопку 'следующая' неактивной
#             self.btn_next2.Enable()
            
             # Делаем вкладку неактивной
            self.notebook.EnableTab(3, False)
           
        else:
            # Выводим сообщение
            wx.MessageBox(u'Чтобы сохранить данные, пожалуйста, заполните все пустые поля', 'Ошибка', wx.OK | wx.ICON_ERROR)
            
#-----------------------------------------------------------------------------------------------------------------

########################################################################
class TabPanelFive(wx.Panel):
    """
    Пятая вкладка
    
    """
#----------------------------------------------------------------------
    def __init__(self, parent):
        """"""
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        
        # Объявляем глобальные переменные
        global txt51, txt52, txt53, txt54, txt55, txt56, txt57, txt58, txt59, txt510
        
#------ Первое поле ----------

        FifthSizer_vert = wx.BoxSizer(wx.VERTICAL) 
        FifthSizer_horiz1 = wx.BoxSizer(wx.HORIZONTAL) 
        
        FifthSizer_vert.AddSpacer(40)
        FifthSizer_horiz1.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz1)

        font51 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text51 = wx.StaticText(self, wx.ID_ANY, "Плотность дегазированной нефти в норм. условиях, кг/м3")
        text51.SetFont(font51)
        text51.SetForegroundColour('black')
        self.Show(True)
        
        txt51 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz1.Add(text51, flag = wx.ALL, border = 15)
        FifthSizer_horiz1.Add(txt51, flag = wx.ALL, border = 15)
        
#------ Второе поле ----------

        FifthSizer_horiz2 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz2.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz2)
    
        font52 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text52 = wx.StaticText(self, wx.ID_ANY, "Вязкость дегазированной нефти, мПа*с")
        text52.SetFont(font52)
        text52.SetForegroundColour('black')
        self.Show(True)
        
        txt52 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
         # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz2.Add(text52, flag = wx.ALL, border = 15)
        FifthSizer_horiz2.Add(txt52, flag = wx.ALL, border = 15) 
        
#------ Третье поле ----------

        FifthSizer_horiz3 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz3.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz3)

        font53 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text53 = wx.StaticText(self, wx.ID_ANY, "Содержание парафина, массовая доля, %")
        text53.SetFont(font53)
        text53.SetForegroundColour('black')
        self.Show(True)
        
        txt53 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz3.Add(text53, flag = wx.ALL, border = 15)
        FifthSizer_horiz3.Add(txt53, flag = wx.ALL, border = 15)
        
#------ Четвертое поле ----------

        FifthSizer_horiz4 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz4.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz4)
        
        font54 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text54 = wx.StaticText(self, wx.ID_ANY, "Содержание асфальтенов, массовая доля, %")
        text54.SetFont(font54)
        text54.SetForegroundColour('black')
        self.Show(True)
        
        txt54 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz4.Add(text54, flag = wx.ALL, border = 15)
        FifthSizer_horiz4.Add(txt54, flag = wx.ALL, border = 15)
        
#------ Пятое поле ----------

        FifthSizer_horiz5 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz5.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz5)
        
        font55 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text55 = wx.StaticText(self, wx.ID_ANY, "Содержание смол селикогелевых, массовая доля, %")
        text55.SetFont(font55)
        text55.SetForegroundColour('black')
        self.Show(True)
        
        txt55 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
         # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz5.Add(text55, flag = wx.ALL, border = 15)
        FifthSizer_horiz5.Add(txt55, flag = wx.ALL, border = 15)
                
#------ Шестое поле ----------

        FifthSizer_horiz6 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz6.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz6)
        
        font56 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text56 = wx.StaticText(self, wx.ID_ANY, "Температура застывания нефти, град. С")
        text56.SetFont(font56)
        text56.SetForegroundColour('black')
        self.Show(True)
        
        txt56 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz6.Add(text56, flag = wx.ALL, border = 15)
        FifthSizer_horiz6.Add(txt56, flag = wx.ALL, border = 15)
                
#------ Седьмое поле ----------
        
        FifthSizer_horiz7 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz7.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz7)
        
        font57 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text57 = wx.StaticText(self, wx.ID_ANY, "Температура насыщения нефти парафином, град. С")
        text57.SetFont(font57)
        text57.SetForegroundColour('black')
        self.Show(True)
        
        txt57 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz7.Add(text57, flag = wx.ALL, border = 15)
        FifthSizer_horiz7.Add(txt57, flag = wx.ALL, border = 15)
        
#------ Восьмое поле ----------

        FifthSizer_horiz8 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz8.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz8)
        
        font58 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text58 = wx.StaticText(self, wx.ID_ANY, "Температура плавления парафинов, град. С")
        text58.SetFont(font58)
        text58.SetForegroundColour('black')
        self.Show(True)
        
        txt58 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz8.Add(text58, flag = wx.ALL, border = 15)
        FifthSizer_horiz8.Add(txt58, flag = wx.ALL, border = 15)
                
#------ Девятое поле ----------

        FifthSizer_horiz9 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz9.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz9)
        
        font59 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text59 = wx.StaticText(self, wx.ID_ANY, "Плотность сопутствующего газа, кг/м3")
        text59.SetFont(font58)
        text59.SetForegroundColour('black')
        self.Show(True)
        
        txt59 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz9.Add(text59, flag = wx.ALL, border = 15)
        FifthSizer_horiz9.Add(txt59, flag = wx.ALL, border = 15)
                
#------ Десятое поле ----------

        FifthSizer_horiz10 = wx.BoxSizer(wx.HORIZONTAL)
    
        FifthSizer_horiz10.AddSpacer(40)
        
        FifthSizer_vert.Add (FifthSizer_horiz10)
            
        font510 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text510 = wx.StaticText(self, wx.ID_ANY, "Плотность сопутствующей воды, кг/м3")
        text510.SetFont(font510)
        text510.SetForegroundColour('black')
        self.Show(True)
        
        txt510 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        FifthSizer_horiz10.Add(text510, flag = wx.ALL, border = 15)
        FifthSizer_horiz10.Add(txt510, flag = wx.ALL, border = 15)
        
#------------------------------------------------------------------------------------------------        
      
        wx.StaticLine(self, pos=(30, 650), size=(950,2))
        
#         self.btn_previous4 = wx.Button(self, wx.ID_OK, label="<<предыдущая", pos=(350, 710))
        self.btn_next5 = wx.Button(self, wx.ID_OK, label="следующая>", pos=(500, 700))
        self.btn_next5.Enable()
        
        self.btn_close5 = wx.Button(self, wx.ID_OK, label="Закрыть", pos=(650, 700))
        self.btn_close5.Bind(wx.EVT_BUTTON, self.onCloseDataTabFive, self.btn_close5)
        
        self.SetSizer(FifthSizer_vert)
#-----------------------------------------------------------------------------------------------------------------        
# Закрываем окно ноутбука

    def onCloseDataTabFive(self, event):
        """ Закрываем ноутбук с данными """      
  
        self.GetTopLevelParent().Destroy()
#----------------------------------------------------------------------------------------------------------------

# Переходим на шестую вкладку
    def OnCheckFifthTab(self, event):
        
        # Контрольные значения
        ro_oil  = txt51.GetValue()
        visc_oil = txt52.GetValue()
        cp = txt53.GetValue()
        asf = txt54.GetValue()
        silica_gel = txt55.GetValue()
        freezing_oil = txt56.GetValue()
        t_0 = txt57.GetValue()
        melting = txt58.GetValue()
        ro_gas = txt59.GetValue()
        ro_water = txt510.GetValue()

        
        if r_oil and visc_oil and cp != '':
            
            # Переходим на следующую вкладку
            self.notebook = self.GetParent()
            self.notebook.SetSelection(5)
            
            # Если все поля заполнены - делаем кнопку 'следующая' неактивной
#             self.btn_next2.Enable()
            
             # Делаем вкладку неактивной
            self.notebook.EnableTab(4, False)
           
        else:
            # Выводим сообщение
            wx.MessageBox(u'Чтобы сохранить данные, пожалуйста, заполните все пустые поля', 'Ошибка', wx.OK | wx.ICON_ERROR)
            
#######################################################################
class TabPanelSix(wx.Panel):
    """
    Шестая вкладка
    """
    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        
        # Объявляем глобальные переменные
        global btn1, txt14, txt61, txt62, txt63, txt64, txt65, txt66, txt67, txt68, txt69, txt610, txt611, txt612, txt613
        
#------ Первое поле ----------

        SixthSizer_vert = wx.BoxSizer(wx.VERTICAL) 
        SixthSizer_horiz1 = wx.BoxSizer(wx.HORIZONTAL) 
        
        SixthSizer_vert.AddSpacer(40)
        SixthSizer_horiz1.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz1)

        font61 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text61 = wx.StaticText(self, wx.ID_ANY, "Допустимое газосодержание при откачке нефтегазовой смеси по объему, %")
        text61.SetFont(font61)
        text61.SetForegroundColour('black')
        self.Show(True)
        
        txt61 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz1.Add(text61, flag = wx.ALL, border = 10)
        SixthSizer_horiz1.Add(txt61, flag = wx.ALL, border = 10)
        
#------ Второе поле ----------

        SixthSizer_horiz2 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz2.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz2) 

        font62 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')   
        text62 = wx.StaticText(self, wx.ID_ANY, "Внутренний диаметр НКТ, м")
        text62.SetFont(font62)
        text62.SetForegroundColour('black')
        self.Show(True)
        
        txt62 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz2.Add(text62, flag = wx.ALL, border = 10)
        SixthSizer_horiz2.Add(txt62, flag = wx.ALL, border = 10)
        
        
#------ Третье поле ----------

        SixthSizer_horiz3 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz3.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz3) 

        font63 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text63 = wx.StaticText(self, wx.ID_ANY, "Внутренний диаметр обсадной трубы, м")
        text63.SetFont(font63)
        text63.SetForegroundColour('black')
        self.Show(True)
        
        txt63 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz3.Add(text63, flag = wx.ALL, border = 10)
        SixthSizer_horiz3.Add(txt63, flag = wx.ALL, border = 10)
        
#------ Четвертое поле ----------  

        SixthSizer_horiz4 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz4.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz4) 
        
        font64 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text64 = wx.StaticText(self, wx.ID_ANY, "Теплоемкость нефти, Дж/кг*К")
        text64.SetFont(font64)
        text64.SetForegroundColour('black')
        self.Show(True)
        
        txt64 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz4.Add(text64, flag = wx.ALL, border = 10)
        SixthSizer_horiz4.Add(txt64, flag = wx.ALL, border = 10)
        
#------ Пятое поле ----------

        SixthSizer_horiz5 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz5.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz5) 
        
        font65 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text65 = wx.StaticText(self, wx.ID_ANY, "Отношение длины верхней части к полной. 1 = одна ступень")
        text65.SetFont(font65)
        text65.SetForegroundColour('black')
        self.Show(True)
        
        txt65 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz5.Add(text65, flag = wx.ALL, border = 10)
        SixthSizer_horiz5.Add(txt65, flag = wx.ALL, border = 10)
        
        
#------ Шестое поле ----------

        SixthSizer_horiz6 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz6.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz6) 
        
        font66 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text66 = wx.StaticText(self, wx.ID_ANY, "Длина холодного конца, м")
        text66.SetFont(font66)
        text66.SetForegroundColour('black')
        self.Show(True)
        
        txt66 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz6.Add(text66, flag = wx.ALL, border = 10)
        SixthSizer_horiz6.Add(txt66, flag = wx.ALL, border = 10)
        
        
#------ Седьмое поле ----------
        
        SixthSizer_horiz7 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz7.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz7) 
        
        font67 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text67 = wx.StaticText(self, wx.ID_ANY, "Толщина термического сопротивления грунта, м")
        text67.SetFont(font67)
        text67.SetForegroundColour('black')
        self.Show(True)
        
        txt67 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz7.Add(text67, flag = wx.ALL, border = 10)
        SixthSizer_horiz7.Add(txt67, flag = wx.ALL, border = 10)
        
        
#------ Восьмое поле ----------
        
        SixthSizer_horiz8 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz8.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz8) 
        
        font68 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text68 = wx.StaticText(self, wx.ID_ANY, "Запас по длине обогрева, м")
        text68.SetFont(font68)
        text68.SetForegroundColour('black')
        self.Show(True)
        
        txt68 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz8.Add(text68, flag = wx.ALL, border = 10)
        SixthSizer_horiz8.Add(txt68, flag = wx.ALL, border = 10)
        
        
#------ Девятое поле ----------

        SixthSizer_horiz9 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz9.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz9) 
        
        font69 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text69 = wx.StaticText(self, wx.ID_ANY, "Запас по минимальной температуре на выходе, град. С")
        text69.SetFont(font69)
        text69.SetForegroundColour('black')
        self.Show(True)
        
        txt69 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz9.Add(text69, flag = wx.ALL, border = 10)
        SixthSizer_horiz9.Add(txt69, flag = wx.ALL, border = 10)
               
#------ Десятое поле ----------    

        SixthSizer_horiz10 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz10.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz10) 
           
        font610 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text610 = wx.StaticText(self, wx.ID_ANY, "Диапазон регулирования по температуре на выходе, град. С")
        text610.SetFont(font610)
        text610.SetForegroundColour('black')
        self.Show(True)
        
        txt610 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz10.Add(text610, flag = wx.ALL, border = 10)
        SixthSizer_horiz10.Add(txt610, flag = wx.ALL, border = 10)
                
#------ Одиннадцатое поле ----------  

        SixthSizer_horiz11 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz11.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz11) 

        font611 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text611 = wx.StaticText(self, wx.ID_ANY, "Диаметр кабеля, м")
        text611.SetFont(font611)
        text611.SetForegroundColour('black')
        self.Show(True)
        
        txt611 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz11.Add(text611, flag = wx.ALL, border = 10)
        SixthSizer_horiz11.Add(txt611, flag = wx.ALL, border = 10)

#------ Двенадцатое поле ----------

        SixthSizer_horiz12 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz12.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz12) 
        
        font612 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text612 = wx.StaticText(self, wx.ID_ANY, "Ручной выбор длины обогрева, м")
        text612.SetFont(font612)
        text612.SetForegroundColour('black')
        self.Show(True)
        
        txt612 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz12.Add(text612, flag = wx.ALL, border = 10)
        SixthSizer_horiz12.Add(txt612, flag = wx.ALL, border = 10)
        
#------ Тринадцатое поле ----------
        
        SixthSizer_horiz13 = wx.BoxSizer(wx.HORIZONTAL)
    
        SixthSizer_horiz13.AddSpacer(40)
        
        SixthSizer_vert.Add (SixthSizer_horiz13) 
        
        font613 = wx.Font(11, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas')  
        text613 = wx.StaticText(self, wx.ID_ANY, "Ручной выбор напряжения питания кабеля, В")
        text613.SetFont(font613)
        text613.SetForegroundColour('black')
        self.Show(True)
      
        txt613 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CENTER)
        
        # Задаем дистанцию между текстом и полем 
        SixthSizer_horiz13.Add(text613, flag = wx.ALL, border = 10)
        SixthSizer_horiz13.Add(txt613, flag = wx.ALL, border = 10)
#-------------------------------------------------------------------------------------------------- 

        # Рисуем линию раздела
        wx.StaticLine(self, pos=(30, 670), size=(950,2))
        
        # Рисуем кнопки
        btn1 = wx.Button(self, wx.ID_OK, label="Сохранить данные", pos=(670, 700))
#         self.btn1.Disable()
        
        btn2 = wx.Button(self, wx.ID_STOP, label="Закрыть", pos=(820, 700))
        
        # Сохраняем введенные данные
        self.Bind(wx.EVT_BUTTON, self.OnCheckSixthTab, btn1)
        self.Bind(wx.EVT_BUTTON, self.onCloseData, btn2)
        
        self.SetSizer(SixthSizer_vert)
#-----------------------------------------------------------------------------------------------------------------        
# Закрываем окно ноутбука

    def onCloseData(self, event):
        """ Закрываем ноутбук с данными """   
        
        # Делаем активной кнопку пуска
        setCalcPanel.EnableButton(ID_Run, True)
            
        # Закрываем ноутбук    
        self.GetTopLevelParent().Destroy()
        
#-----------------------------------------------------------------------------------------------------------------
        
# Проверяем заполнение полей шестой вкладки

    def OnCheckSixthTab(self, event):
        
        # Контрольные значения
#         ESP_gas = txt61.GetValue()
        d_vnut_nkt = txt62.GetValue()
#         d_vnut_obsh = txt63.GetValue()
#         c_neft = txt64.GetValue()
#         kll = txt65.GetValue()
#         holkon = txt66.GetValue()
#         sh_gr = txt67.GetValue()
#         glub_zap = txt68.GetValue()
#         min_T_zap = txt69.GetValue()
#         ustavka = txt610.GetValue()
#         d_kab = txt611.GetValue()
#         long_ = txt612.GetValue()
#         u_u = txt613.GetValue()

        # Проверяем все ли поля заполнены    
        if d_vnut_nkt != '':
            
            # Если да - сохраняем анкетные данные
            self.CallofSaveData(self)
       
        else:
            # Если нет - выводим предупреждающее сообщение
            wx.MessageBox(u'Чтобы сохранить данные, пожалуйста, заполните все пустые поля', 'Ошибка', wx.OK | wx.ICON_ERROR)
            
#----------------------------------------------------------------------------------------------------------------
#
    def CallofSaveData(self, event):
        frame = onSaveAdditionalData(None)
        frame.Show()
    
####################################################################################################################
class NotebookFrame(wx.Frame):
    """    
    """
#----------------------------------------------------------------------
    def __init__(self, parent):
        wx.Frame.__init__(self, parent, id=wx.ID_ANY, title=u"Ввод данных для расчета", pos=wx.DefaultPosition,
                          size=wx.Size(1030, 820), style=wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL)
        
        
        #------------------ Добавляем иконку в верхний левый угол главного окна ----------------------------
        # Размещаем картинку
        icon = wx.Icon('adddata.png', wx.BITMAP_TYPE_PNG)
        # Показываем в окне
        self.SetIcon(icon)
        
        style = aui.AUI_NB_DEFAULT_STYLE ^ aui.AUI_NB_CLOSE_ON_ACTIVE_TAB
        
        mgr = aui.AuiManager()

        # tell AuiManager to manage this frame
        mgr.SetManagedWindow(self)


        # Устанавливаем свойства
        self.notebook = aui.AuiNotebook(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, agwStyle = style)
        
        # Рисуем вкладки      
        tab1 = TabPanelOne(self.notebook)
        tab2 = TabPanelTwo(self.notebook)
        tab3 = TabPanelThree(self.notebook)
        

        tab4 = TabPanelFour(self.notebook)
        tab5 = TabPanelFive(self.notebook)
        tab6 = TabPanelSix(self.notebook)

        # Называем вкладки
        self.notebook.AddPage(tab1, "Лифтовое оборудование", False)
        self.notebook.AddPage(tab2, "Окружающая среда", False)
        self.notebook.AddPage(tab3, "Пластовой флюид", False)
        
        self.notebook.AddPage(tab4, "Скважина", False)
        self.notebook.AddPage(tab5, "Свойства флюида", False)
        self.notebook.AddPage(tab6, "Дополнительные параметры", False)
        
        mgr.AddPane(self.notebook, aui.AuiPaneInfo().Name("notebook_content").CenterPane().PaneBorder(True))
        mgr.Update()
               
        # Доступность вкладок
        """ True - вкладка активна, False - нет"""
        
        # Управляем активностью вкладок 
        self.notebook.EnableTab(0, True)
        self.notebook.EnableTab(1, True)
        self.notebook.EnableTab(2, True)
        self.notebook.EnableTab(3, True)
        self.notebook.EnableTab(4, True)
        self.notebook.EnableTab(5, True)
        
#************************************* Рисуем боксы ********************************************************
# Первая вкладка

 # Общий бокс для первого бокса
    
        fontlabel = wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, False, u'Consolas') 
        Label = wx.StaticBox(tab1, label='1. ОБЩИЕ СВЕДЕНИЯ', pos=(10, 50), size=(610, 410))
        Label.SetFont(fontlabel)
        Label.SetForegroundColour('BLUE')
        self.Show(True)
    
  # Рисуем первый бокс     
        fontlabel1 = wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, False, u'Consolas') 
        Label1 = wx.StaticBox(tab1, label='ЭКСПЛУАТАЦИОННАЯ КОЛОННА', pos=(20, 70), size=(550, 150))
        Label1.SetFont(fontlabel1)
        Label1.SetForegroundColour('BLUE')
        self.Show(True)

  # Рисуем второй бокс

        fontlabel11 = wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, False, u'Consolas')  
        Label2 = wx.StaticBox(tab1, label='НКТ', pos=(120, 250), size=(480, 190))
        Label2.SetFont(fontlabel11)
        Label2.SetForegroundColour('BLUE')
        self.Show(True)        

  # Рисуем третий бокс
        fontlabel111 = wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, False, u'Consolas')  
        Label3 = wx.StaticBox(tab1, label='6. ХАРАКТЕРИСТИКИ НАСОСНОГО ОБОРУДОВАНИЯ', pos=(220, 470), size=(430, 160))
        Label3.SetFont(fontlabel111)
        Label3.SetForegroundColour('BLUE')
        self.Show(True)         
#---------------------------------------------------------------------------------------------------------
# Вторая вкладка

#         sizer_Panel1 = wx.BoxSizer(wx.VERTICAL)
    
        fontlabel2 = wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, False, u'Consolas')  
      
        Label4 = wx.StaticBox(tab2, label='2. РАСПРЕДЕЛЕНИЕ ТЕМПЕРАТУР ПО ГЛУБИНЕ', pos=(95, 35), size=(620, 200))
        
#         Label4 = wx.StaticBox(tab2, label='ПАРАМЕТРЫ СРЕДЫ')
#         LabelName = wx.StaticBoxSizer(Label4, wx.VERTICAL)
#         sizer_Panel1.Add(LabelName, flag = wx.ALL, border = 20) 
        
        Label4.SetFont(fontlabel2)
        Label4.SetForegroundColour('BLUE')
        self.Show(True)
        
#         sizer_Panel1.Add(self.sizer_vert) 
#         self.SetSizer(sizer_Panel1)
#         self.Layout()
#------------------------------------------------------------------------------------------------------------   
# Третья вкладка

        fontlabel3 = wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, False, u'Consolas')  

        Label5 = wx.StaticBox(tab3, label='3. ХАРАКТЕРИСТИКИ ПЛАСТОВОЙ ЖИДКОСТИ', pos=(60, 40), size=(570, 260))
        Label5.SetFont(fontlabel3)
        Label5.SetForegroundColour('BLUE')
        self.Show(True)
#----------------------------------------------------------------------------------------------------------------        
# Четвертая вкладка

        fontlabel4 = wx.Font(10, wx.MODERN, wx.NORMAL, wx.BOLD, False, u'Consolas')  

        Label6 = wx.StaticBox(tab4, label='4. РЕЖИМ ЭКСПЛУАТАЦИИ СКВАЖИНЫ', pos=(40, 30), size=(600, 540))
        Label6.SetFont(fontlabel4)
        Label6.SetForegroundColour('BLUE')
        self.Show(True)
#---------------------------------------------------------------------------------------------------------------
# Пятая вкладка

        fontlabel5 = wx.Font(10, wx.MODERN, wx.NORMAL,  wx.BOLD, False, u'Consolas')  

        Label7 = wx.StaticBox(tab5, label='5. ХАРАКТЕРИСТИКА СЕПАРИРОВАННОЙ НЕФТИ', pos=(40, 20), size=(600, 550))
        Label7.SetFont(fontlabel5)
        Label7.SetForegroundColour('BLUE')
        self.Show(True)
        
#---------------------------------------------------------------------------------------------------------------        
# Шестая вкладка

        fontlabel6 = wx.Font(10, wx.MODERN, wx.NORMAL,  wx.BOLD, False, u'Consolas')  

        Label8 = wx.StaticBox(tab6, label='ДОПОЛНИТЕЛЬНЫЕ ПАРАМЕТРЫ', pos=(30, 20), size=(740, 590))
        Label8.SetFont(fontlabel6)
        Label8.SetForegroundColour('BLUE')
        self.Show(True)
        
        
############################################################################################################

class onSaveAdditionalData(wx.Dialog):
    
    """ Создаем дополнительное окно с дополнением к анкете """
#------------------------------------------------------------------------------------------
    def __init__(self, *args, **kwargs):
        super(onSaveAdditionalData, self).__init__(*args, **kwargs)
        
        self.InitUI()
        
#------------------------------------------------------------------------------------------        
    def InitUI(self):
        
        global button2

        self.SetSize((400, 400))
        self.SetTitle(u'Данные по месторождению')
        self.Centre()
        
        panel = wx.Panel(self, wx.ID_ANY)
        self.currentDirectory = os.getcwd()
        
        wx.StaticText(panel, wx.ID_ANY, u"Оператор:", pos=(10, 20)) 
        wx.StaticText(panel, wx.ID_ANY, u"Название месторождения:", pos=(10, 50))       
        wx.StaticText(panel, wx.ID_ANY, u"Номер скважины:", pos=(10, 80)) 
        self.esp = wx.StaticText(panel, wx.ID_ANY, u"Марка ЭЦН:", pos=(10, 115))
        self.esp.Disable()
        
        self.posCtrl1 = wx.TextCtrl(panel, wx.ID_ANY, "", pos=(80, 20))
        self.posCtrl2 = wx.TextCtrl(panel, wx.ID_ANY, "", pos=(170, 50))
        self.posCtrl3 = wx.TextCtrl(panel, wx.ID_ANY, "", pos=(120, 80))
        self.ESPname = wx.TextCtrl(panel, wx.ID_ANY, "", pos=(100, 110))
        self.ESPname.Disable()
        
        
        wx.StaticBox(panel, label = u'Способ эксплуатации', pos=(25, 145), size=(350, 150))
        
#         self.button1 = wx.Button(panel,label = u"Сохранить данные", pos=(10,320))
        button2 = wx.Button(panel,label = u"Сохранить", pos=(180,320))
        self.button3 = wx.Button(panel,label = u"Закрыть", pos=(290,320))
        
        # Выключаем кнопку 'Создать отчет'
        button2.Enable()
        
        # Рисуем кнопки выбора
        method1 = wx.RadioButton(panel, label = u"Механизированный станок-качалка", pos=(40, 180), 
                                               style = wx.RB_GROUP)
        method2 = wx.RadioButton(panel, label = u"Газлифт", pos=(40, 210))
        self.method3 = wx.RadioButton(panel, label = u"Погружной ЭЦН", pos=(40, 240))
        method3 = wx.RadioButton(panel, label = u"Винтовой насос", pos=(40, 270))

        self.Bind(wx.EVT_RADIOBUTTON, self.onChoice)
        
        self.Bind(wx.EVT_BUTTON, self.onSave_Worksheet_DataAs, button2)
        self.Bind(wx.EVT_BUTTON, self.onClose, self.button3)
        
# Сохраняем данные ноутбука

    def onSave_Worksheet_DataAs(self, event):
        
        """ Сохранение анкетных данных """

        wildcard = "Text source (*.txt)|*.txt|" \
            "All files (*.*)|*.*"
    
        self.currentDirectory = os.getcwd()

        dlg = wx.FileDialog(self, message="Сохранение анкетных данных", defaultDir=self.currentDirectory, 
                            defaultFile="", wildcard=wildcard, style=wx.FD_SAVE)
        
        if dlg.ShowModal() == wx.ID_OK:
            
            path = dlg.GetPath()
            
            report = open(path, "w") 
 #----------------------------------------------------------------------------------------------------------------
 # Считываем значения с полей
        
        """ Ниже приводится список переменных, участвующих в расчетах (цифра - номер пункта анкеты):
        
            h_bhole - 1.4 глубина забоя, м

            h_obs - 1.5 Длина эксплуатационной колонны, м

            d_vnesh_obs - 1.6 Диаметр эксплуатационной колонны,м

            h_nkt - 1.7 Длина колонны НКТ, м

            d_vnesh_nkt - 1.8 Диаметр колонны НКТ, м

            h_stat - 1.9 Статический уровень флюида в скважине, м
            

            t_bhole - 2.1 Температура нефтяного пласта, град С

            h_ice - 2.2 Глубина вечномерзлых грунтов, м

            t_month - 2.3 Средняя температура наиболее холодного месяца, град С

            t_maxh - 2.4 Максимальная температура наиболее теплого месяца, град С
            

            ro - 3.1 Плотность нефтяного флюида в условиях пласта, кг/м3

            visc_plast - 3.2 Вязкость нефтяного флюида в условиях пласта, мПа*с

            pn_plast - 3.3 Давление насыщения в условиях пласта, МПа

            tkpn - 3.4 Температурный коэффициент давления насыщения

            g_plast - 3.5 Газосодержание пластовой жидкости, м3/м3
            

            nomdebit - 4.1 Дебит по жидкости (с чистой НКТ), м3/сут
    
            debit_oil - 4.2 Дебит по нефти, т/сут

            g - 4.3 Газовый фактор, м3/м3

            water - 4.4 Содержание воды, массовая доля,% по массе

            h_din - 4.5 Динамический уровень, м от устья

            p_wellhead - 4.6 Давление на устье, МПа
    
            t_wellhead - 4.7 Температура жидкости на выходе из скважины, град С

            debit - 4.8 Минимальный дебит по жидкости м3/сут

            scraper - 4.9 Глубина спуска скребка при механической очистке, м

            h_aspo - 4.10 Максимальная глубина отложения АСПО (по данным КРС), м
            

            ro_oil - 5.1 Плотность дегазированной нефти в норм. условиях,кг/м3

            visc_oil - 5.2 Вязкость дегазированной нефти, мПа*с

            cp - 5.3 Содержание парафина, массовая доля, %

            asf - 5.4 Содержание асфальтенов, массовая доля, %

            silica_gel - 5.5 Содержание смол силикагелевых, массовая доля, %

            freezing_oil - 5.6 Температура застывания нефти, град С

            t_0 - 5.7 Температура насыщения нефти парафином, град С

            melting - 5.8 Температура плавления парафинов, град С

            ro_gas - 5.9 Плотность сопутствующего газа, кг/м3

            ro_water - 5.10 Плотность сопутствующей воды, кг/м3
            

            ESP_gas - 6.1 Допустимое газосодержание при откачке нефтегазовой смеси по объему, %
            
            u_ESP - 6.2 Напряжение питания ПЭД, В
            
            f_ESP - 6.3 Частота питающего напряжения, Гц
            
            i_ESP - 6.4 Ток потребления ПЭД, А            
            

            d_vnut_nkt - Внутренний диаметр нкт, м

            d_vnut_obs - Внутренний диаметр обсадной трубы, м

            c_neft - Теплоемкость нефти, Дж/кг·К

            kll - Отношение длины верхней части к полной. 1 = одна ступень

            holkon - Длина холодного конца, м

            sh_gr - Толщина термического сопротивления грунта, м

            glub_zap - Запас по длине обогрева, м

            min_T_zap - Запас по минимальной температуре на выходе, °С

            ustavka - Диапазон регулирования по температуре на выходе, °С

            d_kab - Диаметр кабеля, м

            long - Ручной выбор длины обогрева, м

            u_u - Ручной выбор напряжения питания кабеля, В
        
        """
# --------------------------- Определяем переменные ---------------------------------------

        h_bhole = float(txt14.GetValue())
#             h_obs = float(txt15.GetValue())
#             d_vnesh_obs = float(txt16.GetValue())
#             h_nkt  = float(txt17.GetValue())
#             d_vnesh_nkt = float(txt18.GetValue())
#             h_stat = float(txt19.GetValue())
#             u_ESP = float(txt62.GetValue())
#             f_ESP = float(txt63.GetValue())
#             i_ESP = float(txt64.GetValue())

#             t_bhole = float(txt21.GetValue())
#             h_ice = float(txt22.GetValue())
#             t_month = float(txt23.GetValue())
#             t_maxh = float(txt24.GetValue())

#             ro = float(txt31.GetValue())
#             visc_plast = float(txt32.GetValue())
#             pn_plast = float(txt33.GetValue())
#             tkpn = float(txt34.GetValue())
#             g_plast = float(txt35.GetValue())

#             nomdebit = float(txt41.GetValue())
#             debit_oil  = float(txt42.GetValue())
#             g = float(txt43.GetValue())
#             water = float(txt44.GetValue())
#             h_din = float(txt45.GetValue())
#             p_wellhead = float(txt46.GetValue())
#             t_wellhead = float(txt47.GetValue())
#             debit = float(txt48.GetValue())
#             scraper = float(txt49.GetValue())
#             h_aspo = float(txt410.GetValue())

#             ro_oil  = float(txt51.GetValue())
#             visc_oil = float(txt52.GetValue())
#             cp = float(txt53.GetValue())
#             asf = float(txt54.GetValue())
#             silica_gel = float(txt55.GetValue())
#             freezing_oil = float(txt56.GetValue())
#             t_0 = float(txt57.GetValue())
#             melting = float(txt58.GetValue())
#             ro_gas = float(txt59.GetValue())
#             ro_water = float(txt510.GetValue())

#             ESP_gas = float(txt61.GetValue())
        d_vnut_nkt = float(txt62.GetValue())
#             d_vnut_obsh = float(txt63.GetValue())
#             c_neft = float(txt64.GetValue())
#             kll = float(txt65.GetValue())
#             holkon = float(txt66.GetValue())
#             sh_gr = float(txt67.GetValue())
#             glub_zap = float(txt68.GetValue())
#             min_T_zap = float(txt69.GetValue())
#             ustavka = float(txt610.GetValue())
#             d_kab = float(txt611.GetValue())
#             long_ = float(txt612.GetValue())
#             u_u = float(txt613.GetValue())
        
            # Создаем заголовочный файл

            # Устанавливаем дату и время
        date = strftime("%a %d-%m-%y %H:%M:%S")

        # Добавляем линию конца заголовочного файла
        div = '********************** Конец заголовка ***************************'
       
        report.write('\n Сохраненные анкетные данные')
                
        report.write('\n')
        
        report.write('\n Разработчик: ООО ОКБ "Гамма"')
        
        report.write('\n')
        
        report.write('\n Дата сохранения: ' + date)
        
        report.write('\n')
        
        report.write('\n Оператор: %s' % str(self.posCtrl1.GetValue()))
        
        report.write('\n')
        
        report.write('\n Наименование месторождения: %s' % str(self.posCtrl2.GetValue()))
        
        report.write('\n')
        
        report.write('\n Номер скважины: %s' % str(self.posCtrl3.GetValue()))
        
        report.write('\n')
               
        report.write('\n Способ эксплуатации скважины: %s' % self.label)
    
        report.write('\n')     
        
        report.write('\n' + div * 1 + '\n')
        
        report.write('\n') 
        
        report.write('\n Глубина забоя, м: %s' % h_bhole)
        
        report.write('\n')
            
#         report.write('\n Наименование, размерность: %s' % value)
            
#         report.write('\n')
            
    #---------- добавляем переменные для сохранения -----------------        
            
            
        report.write('\n Внутренний диаметр нкт, м: %s' % d_vnut_nkt)
        
        report.write('\n')
    
       

        # Закрываем файл после записи
        report.close()
    
        # Деактивируем кнопку 'Сохранене данных'
        btn1.Disable()
        
        button2.Disable()
        
            # Выводим сообщение об успешности сохранения
        wx.MessageBox(u'Анкетные данные успешно сохранены!', u'Сохранение', wx.OK | wx.ICON_INFORMATION)

#----------------------------------------------------------------------------------------------
    def onChoice(self, event):
        
        """ Выбираем способ добычи """
        
        btn = event.GetEventObject()
        
        if btn == self.method3:
            self.esp.Enable()
            self.ESPname.Enable()  
            self.label = str(self.ESPname.GetValue())
        else:
            self.esp.Disable()
            self.ESPname.Disable()
            self.label = btn.GetLabel()
        
#--------------------------------------------------------------------------------------------

    def onClose(self, event):
        """ закрываем окно с данными по месторождению """
        self.Close()

##################################################################################################  
#--------------------------------- ProgressBar и Расчет -----------------------------------------#
##################################################################################################

class MyProgressDialog(wx.ProgressDialog):
    
    
  # Симулируем ход расчета 

    progressMax = 10
#------------------------------------------------------------------------------------    
    def __init__(self):
        wx.ProgressDialog.__init__(self, "Расчет выполняется",
            "Осталось времени", self.progressMax,
            style=wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME | wx.PD_AUTO_HIDE)

#-------------------------------------------------------------------------------------
    def Show(self):
        keepGoing = True
        count = 0
        while keepGoing and count < self.progressMax:
            count = count + 1
            wx.Sleep(1)
            keepGoing = self.Update(count)
            
#***************************************************************************************************


           #---------------------- вставить сюда строчки расчета --------------------------#
        
        
#****************************************************************************************************
        
        
        # Показываем сообщение что расчет выполнен успешно 
        wx.MessageBox(u'Расчет выполнен успешно!', u'Сообщение', wx.OK | wx.ICON_INFORMATION)

        
    #  После расчета выключаем кнопки

          # Активность кнопки 'Пуск'  
        setCalcPanel.EnableButton(ID_Run, False)
        
    # Включаем остальные поля по окончанию расчета

        # Активность кнопки 'Построить график'  
        setResult.EnableButton(ID_Plot, True)
        
        # Активность кнопки 'Создать отчет' 
        setResult.EnableButton(ID_CreateReport, True)
        
        # Активность кнопки 'Просмотр отчета' 
        setResult.EnableButton(ID_ViewReport, True)
        
        # Активность кнопки 'Печать отчета' 
        setResult.EnableButton(ID_PrintReport, True)

##################################################################################################  
#---------------------------------------- 'Просмотра отчета' ------------------------------------#
##################################################################################################

class Viewer(wx.Frame):
    
#----------------------------------------------------------------------------------------------    
    def __init__(self, parent, title):

        wx.Frame.__init__(self, parent, title=title, size = (600, 500))
        
        style = aui.AUI_NB_DEFAULT_STYLE ^ wx.aui.AUI_NB_BOTTOM

        # Create the notebook 
             
        mgr = aui.AuiManager()

        # tell AuiManager to manage this frame
        mgr.SetManagedWindow(self)

        self.notebook = aui.AuiNotebook(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, agwStyle=style) 
    
        # Добавляем иконку в верхний левый угол главного окна        
        # Размещаем картинку
        icon = wx.Icon('viewer.png', wx.BITMAP_TYPE_PNG)
        # Показываем в окне
        self.SetIcon(icon)

        # Creating the menubar
        menu_bar = wx.MenuBar()

        # Setting up the menu
        file_menu = wx.Menu()
        # wx.ID_OPEN
        menu_item = file_menu.Append(wx.ID_OPEN, '&Открыть...\tCtrl+N', 'выбираем нужный файл ')
        
        # Bind the "select menu item" event to the OnOpen event handler
        self.Bind(wx.EVT_MENU, self.OnOpenFile, menu_item)
    

        # Adding the 'file_menu' to the menu bar
        menu_bar.Append(file_menu, '&Файл')
        file_menu.AppendSeparator()
      
        qmi = wx.MenuItem(file_menu, wx.ID_EXIT, '&Выход\tCtrl+Q', 'входим из программы')
        file_menu.Append(qmi)
        self.Bind(wx.EVT_MENU, self.OnQuitViewer, qmi)
        
        # Adding the menu bar to the frame content
        self.SetMenuBar(menu_bar)
        self.Center()
        self.Show()
        
        # Создаем строку состояния StatusBar
        self.CreateStatusBar()
        
        # Выводим в нем приветствие
        self.PushStatusText("Добро пожаловать! выбирете меню Файл чтобы открыть файл")
        
#---------------------------------------------------------------------------------------------------        
    def OnOpenFile(self, event):

        # This is how you pre-establish a file filter so that the dialog
        # only shows the extension(s) you want it to.
        
#         wildcard = 'Python source (*.py)|*.py'
        wildcard = 'Text source (*.txt)|*.txt'
        
        dlg = wx.FileDialog(None, message="Выбор файла", defaultDir=os.getcwd(), 
                            defaultFile="", wildcard=wildcard, style=wx.FD_OPEN)

        # Show the dialog and retrieve the user response. If it is the OK response, 
        # process the data.
        if dlg.ShowModal() == wx.ID_OK:
            # This returns the file that was selected
            path = dlg.GetPath()

            # Open the file as read-only and slurp its content
            fid = open(path, 'rt')
            text = fid.read()
            fid.close()

            text_ctrl = wx.TextCtrl(self.notebook, style=wx.TE_MULTILINE)
            text_ctrl.SetFont(wx.Font(FONTSIZE, wx.TELETYPE, wx.NORMAL, wx.NORMAL))
            text_ctrl.SetValue(text)

            filename = os.path.split(os.path.splitext(path)[0])[1]
            self.notebook.AddPage(text_ctrl, filename, select=True)

        # Destroy the dialog. Don't do this until you are done with it!
        # BAD things can happen otherwtwise!
        dlg.Destroy()
        
#------------------------------------------------------------------------------------------------        
    def OnQuitViewer(self, event):
        self.Close()
        
##################################################################################################  
#--------------------------------------- 'Построить график' -------------------------------------#
##################################################################################################

class PlotFrame(wx.Frame):
    help_msg="""  Пункты меню:
     Сохранить                       экспорт рисунка графика (png, eps, bmp, jpg) в файл
     Копировать                      копировать изображение графика в системный буфер обмена
     Настройка печати                настройка размера страницы для печати
     Предварительный просмотр        предварительный просмотр страницы для печати
     Печать                          отправить график на печать на текущий принтер
     Выход                           выход из приложения
  
     где 'рисунок' означает изображение, построенное с помощью библиотеки matplotlib canvas
  
  В добавок, нажатие сочетания клавиш "Ctrl-C" позволяют сохранить изображение в системном буфере обмена
"""
  
    start_msg  = """        воспользуйтесь Меню для печати
        или Ctrl-C чтобы скопировать изображение в буфер  """
  
    about_msg =  """    распечатано из wx версия 0.1  03-Aug-2018
        Гераськин Игорь <i.geraskin@okb-gamma.ru>"""
#---------------------------------------------------------------------------------------  
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "Результирующий график")
        self.fig   = Figure((5.0, 3.0), 100)
        self.canvas= FigCanvas(self, -1, self.fig)
        self.axes  = self.fig.add_axes([0.15, 0.15, 0.75, 0.75])
  
  
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.canvas, 1, wx.LEFT|wx.TOP|wx.GROW)
        sizer.Add(wx.StaticText(self,-1, self.start_msg), 0, wx.ALIGN_LEFT|wx.TOP)
  
        self.canvas.Bind(wx.EVT_KEY_DOWN, self.onKeyEvent)
  
        self.SetSizer(sizer)
        self.Fit()
        self.Build_Menus()
        self.Plot_Data()
#------------------------------------------------------------------------------------------  
    def Build_Menus(self):
        """ создаем меню """
        MENU_EXIT  = wx.NewIdRef()
        MENU_SAVE  = wx.NewIdRef()
        MENU_PRINT = wx.NewIdRef()
        MENU_PSETUP = wx.NewIdRef()
        MENU_PREVIEW = wx.NewIdRef()
        MENU_CLIPB = wx.NewIdRef()
        MENU_HELP = wx.NewIdRef()
  
        menuBar = wx.MenuBar()
  
        f0 = wx.Menu()
        f0.Append(MENU_SAVE,   "&Экспорт изображения",   "Сохранить изображение графика")
        f0.AppendSeparator()
        f0.Append(MENU_PSETUP, "Настройка страницы...",    "Нстройка принтера")
        f0.Append(MENU_PREVIEW,"Предварительный просмотр...", "Предварительный просмотр")
        f0.Append(MENU_PRINT,  "&Печать",           "Печать графика")
        f0.AppendSeparator()
        f0.Append(MENU_EXIT,   "В&ыход", "Выход")
        menuBar.Append(f0,     "&Файл");
  
        f1 = wx.Menu()
        f1.Append(MENU_HELP, "Краткий справочник",  "Краткий справочник")
  
        menuBar.Append(f1, "&Помощь");
  
        self.SetMenuBar(menuBar)
  
        self.Bind(wx.EVT_MENU, self.onPrint,          id=MENU_PRINT)
        self.Bind(wx.EVT_MENU, self.onPrinterSetup,   id=MENU_PSETUP)
        self.Bind(wx.EVT_MENU, self.onPrinterPreview, id=MENU_PREVIEW)
        self.Bind(wx.EVT_MENU, self.onClipboard,      id=MENU_CLIPB)
        self.Bind(wx.EVT_MENU, self.onExport,         id=MENU_SAVE)
        self.Bind(wx.EVT_MENU, self.onExit ,          id=MENU_EXIT)
        self.Bind(wx.EVT_MENU, self.onHelp,           id=MENU_HELP)
        
        # initialize the print data and set some default values
        self.pdata = wx.PrintData()
        self.pdata.SetPaperId(wx.PAPER_LEGAL)
        self.pdata.SetOrientation(wx.LANDSCAPE)
        self.margins = (wx.Point(1,10), wx.Point(1,10))
#------------------------------------------------------------------------------------------
    # 
    def onPrinterSetup(self,event=None):
        self.canvas.Printer_Setup(event=event)

#------------------------------------------------------------------------------------------  
    def onPrinterPreview(self, bmp):
#     def onPrinterPreview(self,event=None):
#         self.canvas.Printer_Preview(event=event)
#         def Preview(self, bmp):

        """Show the print preview """

        data = wx.PrintDialogData(self.pdata)
        picture = self.canvas.GetValue()
        
        printout1 = TextDocPrintout(picture, "title", self.margins)
        printout2 = None
        preview = wx.PrintPreview(printout1, printout2, self.pdata)
        preview.SetZoom(100)
        if preview.IsOk():
            pre_frame = wx.PreviewFrame(preview,
                                        self.parent,
                                        "Print Preview")
            # The default size of the preview frame
            # sometimes needs some help.
            dsize = wx.GetDisplaySize()
            width = self.parent.GetSize()[0]
            height = dsize.GetHeight() - 100
            pre_frame.SetInitialSize((width, height))
            pre_frame.Initialize()
            pre_frame.Show()
        else:
            # Error
            wx.MessageBox("Failed to create print preview", "Ошибка печати", style=wx.ICON_ERROR|wx.OK)
        
#------------------------------------------------------------------------------------------  
    def onPrint(self,event=None):
        self.canvas.Printer_Print(event=event)
        
#------------------------------------------------------------------------------------------
    def onClipboard(self,event=None):
        self.canvas.Copy_to_Clipboard(event=event)
        msg = "Это работает отлично!"
        print (msg)
        
#------------------------------------------------------------------------------------------
    def onKeyEvent(self,event=None):
        """ копируем изображение в буфер обмена """
        
        if event == None: return
        key = event.KeyCode()
        if (key < wx.WXK_SPACE or  key > 255):  return
  
        if (event.ControlDown() and chr(key)=='C'): # Ctrl-C
            self.onClipboard(event=event)
            
#------------------------------------------------------------------------------------------
    def onHelp(self, event=None):
        """ вызываем спревку """
        dlg = wx.MessageDialog(self, self.help_msg, "Краткий справочник", wx.OK | wx.ICON_INFORMATION)
        dlg.ShowModal()
        dlg.Destroy()
        
#------------------------------------------------------------------------------------------  
    def onExport(self,event=None):
        """ сохраняем изображение в файл """
        
        file_choices = "JPG (*.jpg)|*.jpg|" \
                       "PNG (*.png)|*.png|" \
                       "PS (*.ps)|*.ps|" \
                       "EPS (*.eps)|*.eps|" \
                       "BMP (*.bmp)|*.bmp"
  
        thisdir  = os.getcwd()
  
        dlg = wx.FileDialog(self, message='Сохранение изображения',
                            defaultDir = thisdir, defaultFile='plot.jpg',
                            wildcard=file_choices, style=wx.FD_SAVE)
  
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.canvas.print_figure(path, dpi=300)
            
            if (path.find(thisdir) ==  0):
                path = path[len(thisdir)+1:]
            print('Сохраняем график в %s' % path)
            
#---------------------------------------------------------------------------------------  
    def onExit(self,event=None):
        self.Destroy()
        
#---------------------------------------------------------------------------------------  
    def Plot_Data(self):
        """ строим график """
        
        t = numpy.arange(0.0,5.0,0.01)
        s = numpy.sin(2.0*numpy.pi*t)
        c = numpy.cos(0.4*numpy.pi*t)
        
       
        self.axes.plot(t,s)
        self.axes.plot(t,c)

##################################################################################################  
#--------------------------------------- 'Печать отчета' ----------------------------------------#
##################################################################################################
# Устанавливаем размер шрифта
FONTSIZE = 11

#################################################################################
class TextDocPrintout(wx.Printout):
    """
    Печатаем документ.
    
    Does not handle page numbers or titles, and it assumes that no
    lines are longer than what will fit within the page width.  
    
    """
#-------------------------------------------------------------------------
    def __init__(self, text, title, margins):
        wx.Printout.__init__(self, title)
        self.lines = text.split('\n')
        self.margins = margins

#-------------------------------------------------------------------------
    def HasPage(self, page):
        return page <= self.numPages
    
#-------------------------------------------------------------------------
    def GetPageInfo(self):
        return (1, self.numPages, 1, self.numPages)

#--------------------------------------------------------------------------
    def CalculateScale(self, dc):
        # Scale the DC such that the printout is roughly the same as
        # the screen scaling.
        ppiPrinterX, ppiPrinterY = self.GetPPIPrinter()
        ppiScreenX, ppiScreenY = self.GetPPIScreen()
        logScale = float(ppiPrinterX)/float(ppiScreenX)

        # Now adjust if the real page size is reduced (such as when
        # drawing on a scaled wx.MemoryDC in the Print Preview.)  If
        # page width == DC width then nothing changes, otherwise we
        # scale down for the DC.
        pw, ph = self.GetPageSizePixels()
        dw, dh = dc.GetSize()
        scale = logScale * float(dw)/float(pw)

        # Set the DC's scale.
        dc.SetUserScale(scale, scale)

        # Find the logical units per millimeter (for calculating the
        # margins)
        self.logUnitsMM = float(ppiPrinterX)/(logScale*25.4)

#---------------------------------------------------------------------------------------
    def CalculateLayout(self, dc):
        # Determine the position of the margins and the
        # page/line height
        topLeft, bottomRight = self.margins
        dw, dh = dc.GetSize()
        self.x1 = topLeft.x * self.logUnitsMM
        self.y1 = topLeft.y * self.logUnitsMM
        self.x2 = dc.DeviceToLogicalXRel(dw) - bottomRight.x * self.logUnitsMM 
        self.y2 = dc.DeviceToLogicalYRel(dh) - bottomRight.y * self.logUnitsMM 

        # use a 1mm buffer around the inside of the box, and a few
        # pixels between each line
        self.pageHeight = self.y2 - self.y1 - 2*self.logUnitsMM
        font = wx.Font(FONTSIZE, wx.TELETYPE, wx.NORMAL, wx.NORMAL)
        dc.SetFont(font)
        self.lineHeight = dc.GetCharHeight() 
        self.linesPerPage = int(self.pageHeight/self.lineHeight)

#------------------------------------------------------------------------------------------
    def OnPreparePrinting(self):
        # calculate the number of pages
        dc = self.GetDC()
        self.CalculateScale(dc)
        self.CalculateLayout(dc)
        self.numPages = len(self.lines) / self.linesPerPage
        if len(self.lines) % self.linesPerPage != 0:
            self.numPages += 1

#------------------------------------------------------------------------------------------
    def OnPrintPage(self, page):
        dc = self.GetDC()
        self.CalculateScale(dc)
        self.CalculateLayout(dc)

        # Рисуем контур страницы в пунктирах
        dc.SetPen(wx.Pen("black", 0))
        dc.SetBrush(wx.TRANSPARENT_BRUSH)
        self.r = wx.RectPP((self.x1, self.y1), (self.x2, self.y2))
        dc.DrawRectangleRect(self.r)
        dc.SetClippingRect(self.r)

        # Draw the text lines for this page
        line = (page-1) * self.linesPerPage
        x = self.x1 + self.logUnitsMM
        y = self.y1 + self.logUnitsMM
        while line < (page * self.linesPerPage):
            dc.DrawText(self.lines[line], x, y)
            y += self.lineHeight
            line += 1
            if line >= len(self.lines):
                break
        return True

######################################################################################################
class PrintFrameworkSample(wx.Frame):
#--------------------------------------------------------------------------------------------    
    def __init__(self):
        wx.Frame.__init__(self, None, size=(900, 800), title="Печать отчета")
        
        # Создаем строку состояний
        self.CreateStatusBar()

        wildcard = "Text source (*.txt)|*.txt|" \
            "All files (*.*)|*.*"
        
        # Создаем окно
        frame = wx.Frame(None, title="Открываем файл", size=(800, 700))
        
        # A text widget to display the doc and let it be edited
        self.tc = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_DONTWRAP)
        
        # Задаем параметры отображаемого шрифта документа
        self.tc.SetFont(wx.Font(FONTSIZE, wx.TELETYPE, wx.NORMAL, wx.NORMAL))
        
        # Выбираем текущую рабочую директорию
        self.currentDirectory = os.getcwd()

        # Открываем диалог и выбираем файл        
        dialog = wx.FileDialog(None, message="Открытие документа", defaultDir= self.currentDirectory, 
                            defaultFile="", wildcard=wildcard, style=wx.FD_OPEN)

        # Show the dialog and retrieve the user response. If it is the OK response, 
        # process the data.
        if dialog.ShowModal() == wx.ID_OK:
            # This returns the file that was selected
            path = dialog.GetPath()

        # Open the file as read-only and slurp its content
            fileopen = open(path, 'r')
            self.tc.SetValue(fileopen.read())
            fileopen.close()  
     
        self.tc.Bind(wx.EVT_SET_FOCUS, self.OnClearSelection)
        wx.CallAfter(self.tc.SetInsertionPoint, 0)

        # Создаем меню и пункты меню
        
        # Создаем пункты меню
        menu = wx.Menu()
        
        # Добавляем пункт 'Настройка страницы'
        item = menu.Append(-1, "Настройка страницы...\tF5",
                           "Установка параметров страницы и пр.")
        
        # При вызове этого пункта переходим в метод настройки страницы
        self.Bind(wx.EVT_MENU, self.OnPageSetup, item)
        
        # Добавляем пункт 'Настройка печати'
        item = menu.Append(-1, "Настройка печати...\tF6",
                           "Установка настроек принтера и т.д.")
        
        # Добавляем разделитель
        menu.AppendSeparator()
        
        self.Bind(wx.EVT_MENU, self.OnPrintSetup, item)
        
        # Добавляем пункт 'Предварительный просмотр'
        item = menu.Append(-1, "Предварительный просмотр...\tF7",
                           "View the printout on-screen")
        
        self.Bind(wx.EVT_MENU, self.OnPrintPreview, item)
        
        # Добавляем пункт 'Печать'
        item = menu.Append(-1, "Печать...\tF8", "Печать документа")
        
        self.Bind(wx.EVT_MENU, self.OnPrint, item)
        
        # Создаем меню
        menubar = wx.MenuBar()
        
        filemenu = wx.Menu()
        
        quit =filemenu.Append(-1, "Выход", "Выйти из приложения")
        
        # Выходим из программы
        self.Bind(wx.EVT_MENU, self.OnExit, quit)
        
        # Создаем меню 'Файл'
        menubar.Append(filemenu, "&Файл")

        # Создаем пункт меню 'Настройки'
        menubar.Append(menu, "&Настройки")
        
        self.SetMenuBar(menubar)
        
        # Инициализируем данные печати и устанавливаем ряд параметров по умолчанию
        
        self.pdata = wx.PrintData()
        
        # Задаем размер бумаги
        self.pdata.SetPaperId(wx.PAPER_LETTER)
        
        # Задаем ориентацию полей
        self.pdata.SetOrientation(wx.PORTRAIT)
        
        # Устанавливаем отступы полей
        self.margins = (wx.Point(15,15), wx.Point(15,15))

#-------------------------------------------------------------------------------------
# Выходим из редактора

    def OnExit(self, evt):
        self.Close()

#--------------------------------------------------------------------------------------
    def OnClearSelection(self, evt):
        evt.Skip()
        wx.CallAfter(self.tc.SetInsertionPoint, self.tc.GetInsertionPoint())

#--------------------------------------------------------------------------------------
# Настраиваем страницу

    def OnPageSetup(self, evt):
        data = wx.PageSetupDialogData()
        data.SetPrintData(self.pdata)

        data.SetDefaultMinMargins(True)
        data.SetMarginTopLeft(self.margins[0])
        data.SetMarginBottomRight(self.margins[1])

        dlg = wx.PageSetupDialog(self, data)
        if dlg.ShowModal() == wx.ID_OK:
            data = dlg.GetPageSetupData()
            self.pdata = wx.PrintData(data.GetPrintData()) # force a copy
            self.pdata.SetPaperId(data.GetPaperId())
            self.margins = (data.GetMarginTopLeft(), data.GetMarginBottomRight())
        dlg.Destroy()

#------------------------------------------------------------------------------------------------
    def OnPrintSetup(self, evt):
        data = wx.PrintDialogData(self.pdata)
        dlg = wx.PrintDialog(self, data)
        dlg.GetPrintDialogData().SetSetupDialog(True)
        dlg.ShowModal()
        data = dlg.GetPrintDialogData()
        self.pdata = wx.PrintData(data.GetPrintData()) # force a copy
        dlg.Destroy()

#-------------------------------------------------------------------------------------------------
# Предварительный просмотр документа

    def OnPrintPreview(self, evt):
        data = wx.PrintDialogData(self.pdata)
        text = self.tc.GetValue() 
        printout1 = TextDocPrintout(text, "название", self.margins)
#         printout2 = None
        printout2 = TextDocPrintout(text, "название", self.margins)
        preview = wx.PrintPreview(printout1, printout2, data)

        if not preview.Ok():
            wx.MessageBox("Невозможно открыть предварительный просмотр!", "Ошибка", style=wx.ICON_ERROR|wx.OK)
        else:
            # create the preview frame such that it overlays the app frame
            frame = wx.PreviewFrame(preview, self, "Предварительный просмотр", pos=self.GetPosition(), size=self.GetSize())
#             frame = wx.PreviewFrame(preview, self, "Предварительный просмотр",  wx.Point(100, 100), wx.Size(600, 650))

            # размеры
#             dsize = wx.GetDisplaySize()
#             width = self.parent.GetSize()[0]
#             height = dsize.GetHeight() - 100
#             frame.SetInitialSize((width, height))
            frame.Initialize()
            frame.Show()

#--------------------------------------------------------------------------------------------
# Отправляем документ на печать

    def OnPrint(self, evt):
        data = wx.PrintDialogData(self.pdata)
        printer = wx.Printer(data)
        text = self.tc.GetValue() 
        printout = TextDocPrintout(text, "название", self.margins)
        useSetupDialog = True
        
        if not printer.Print(self, printout, useSetupDialog) \
           and printer.GetLastError() == wx.PRINTER_ERROR:
            wx.MessageBox(
                "Возникла проблема при печати.\n"
                "Возможно Ваш текущий принтер не настроен корректно?",
                "Ошибка печати", style=wx.ICON_ERROR|wx.OK)
        else:
            data = printer.GetPrintDialogData()        # сохраняем копию данных для печати в будущем
            self.pdata = wx.PrintData(data.GetPrintData()) # force a copy
        printout.Destroy()

##################################################################################################  
#------------------------------------------- 'Помощь' -------------------------------------------#
##################################################################################################

class HelpWindow(wx.Frame):

    def __init__(self, *args, **kw):
        super(HelpWindow, self).__init__(*args, **kw)

        self.InitUI()

    def InitUI(self):

        toolbar = self.CreateToolBar()
        toolbar.AddTool(1, 'Выход', wx.Bitmap('texit.png'))
        toolbar.AddTool(2, 'Помощь', wx.Bitmap('help.png'))
        
        toolbar.Realize()

        self.splitter = wx.SplitterWindow(self)
        
        self.panelLeft = wx.Panel(self.splitter, wx.ID_ANY, style=wx.BORDER_SUNKEN)

        self.panelRight = wx.Panel(self.splitter)
        vbox2 = wx.BoxSizer(wx.VERTICAL)
        
        header = wx.Panel(self.panelRight, wx.ID_ANY)

        header.SetBackgroundColour('#6f6a59')
        header.SetForegroundColour('white')
        
        # Размещаем картинку
        icon = wx.Icon('help icon.png', wx.BITMAP_TYPE_PNG)
        # Показываем в окне
        self.SetIcon(icon)

        hbox = wx.BoxSizer(wx.HORIZONTAL)

        st = wx.StaticText(header, wx.ID_ANY, 'Помощь')
        font = st.GetFont()
        font.SetFamily(wx.FONTFAMILY_ROMAN)
        font.SetPointSize(11)
        st.SetFont(font)

        hbox.Add(st, 1, wx.TOP | wx.BOTTOM | wx.LEFT, 8)

        closeBtn = wx.BitmapButton(header, wx.ID_ANY, wx.Bitmap('close.png', wx.BITMAP_TYPE_PNG), style=wx.NO_BORDER)
        
        closeBtn.SetBackgroundColour('#6f6a59')
        
        hbox.Add(closeBtn, 0, wx.TOP|wx.BOTTOM, 8)
        header.SetSizer(hbox)

        vbox2.Add(header, 0, wx.EXPAND)

        helpWin = html.HtmlWindow(self.panelRight, style=wx.NO_BORDER)
        
        helpWin.LoadPage('help.html')

        vbox2.Add(helpWin, 1, wx.EXPAND)

        self.panelRight.SetSizer(vbox2)
        self.panelLeft.SetFocus()

        self.splitter.SplitVertically(self.panelLeft, self.panelRight)
        self.splitter.Unsplit()

        self.Bind(wx.EVT_BUTTON, self.CloseHelp, id=closeBtn.GetId())
        self.Bind(wx.EVT_TOOL, self.OnCloseHelp, id=1)
        self.Bind(wx.EVT_TOOL, self.OnHelp, id=2)

        self.panelLeft.Bind(wx.EVT_KEY_DOWN, self.OnKeyPressed)
        self.panelLeft.SetFocus()

        self.CreateStatusBar()

        self.SetTitle('Помощь')
        self.Centre()

    def OnCloseHelp(self, e): 
        self.Close()

    def OnHelp(self, e):

        self.splitter.SplitVertically(self.panelLeft, self.panelRight, 0)
        self.panelLeft.SetFocus()

    def CloseHelp(self, e):

        self.splitter.Unsplit()
        self.panelLeft.SetFocus()

    def OnKeyPressed(self, e):

        keycode = e.GetKeyCode()
        print(keycode)

        if keycode == wx.WXK_F1:

            self.splitter.SplitVertically(self.panelLeft, self.panelRight, 0)
            self.panelLeft.SetFocus()
            
####################################################################################################
# Главный цикл
if __name__ == '__main__':
    main()
