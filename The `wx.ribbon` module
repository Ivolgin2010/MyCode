# -*- coding: utf-8 -*-
    2 #---------------------------------------------------------------------------
    3 # This file is generated by wxPython's PI generator.  Do not edit by hand.
    4 #
    5 # The *.pyi files are used by PyCharm and other development tools to provide
    6 # more information, such as PEP 484 type hints, than it is able to glean from
    7 # introspection of extension types and methods.  They are not intended to be
    8 # imported, executed or used for any other purpose other than providing info
    9 # to the tools. If you don't use use a tool that makes use of .pyi files then
   10 # you can safely ignore this file.
   11 #
   12 # See: https://www.python.org/dev/peps/pep-0484/
   13 #      https://www.jetbrains.com/help/pycharm/2016.1/type-hinting-in-pycharm.html
   14 #
   15 # Copyright: (c) 2017 by Total Control Software
   16 # License:   wxWindows License
   17 #---------------------------------------------------------------------------
   18 
   19 
   20 """
   21 The `wx.ribbon` module contains a set of classes for writing a ribbon-based user interface.
   22 
   23 At the most generic level, this is a combination of a tab control with a
   24 toolbar. At a more functional level, it is similar to the user interface
   25 present in recent versions of Microsoft Office and in Windows 10.
   26 """
   27 #-- begin-_ribbon --#
   28 
   29 import wx
   30 #-- end-_ribbon --#
   31 #-- begin-ribbon_control --#
   32 
   33 class RibbonControl(wx.Control):
   34     """
   35     RibbonControl()
   36     RibbonControl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=wx.ControlNameStr)
   37     
   38     wxRibbonControl serves as a base class for all controls which share
   39     the ribbon characteristics of having a ribbon art provider, and
   40     (optionally) non-continuous resizing.
   41     """
   42 
   43     def __init__(self, *args, **kw):
   44         """
   45         RibbonControl()
   46         RibbonControl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=wx.ControlNameStr)
   47         
   48         wxRibbonControl serves as a base class for all controls which share
   49         the ribbon characteristics of having a ribbon art provider, and
   50         (optionally) non-continuous resizing.
   51         """
   52 
   53     def SetArtProvider(self, art):
   54         """
   55         SetArtProvider(art)
   56         
   57         Set the art provider to be used.
   58         """
   59 
   60     def GetArtProvider(self):
   61         """
   62         GetArtProvider() -> RibbonArtProvider
   63         
   64         Get the art provider to be used.
   65         """
   66 
   67     def IsSizingContinuous(self):
   68         """
   69         IsSizingContinuous() -> bool
   70         """
   71 
   72     def GetNextSmallerSize(self, *args, **kw):
   73         """
   74         GetNextSmallerSize(direction) -> wx.Size
   75         GetNextSmallerSize(direction, relative_to) -> wx.Size
   76         
   77         If sizing is not continuous, then return a suitable size for the
   78         control which is smaller than the current size.
   79         """
   80 
   81     def GetNextLargerSize(self, *args, **kw):
   82         """
   83         GetNextLargerSize(direction) -> wx.Size
   84         GetNextLargerSize(direction, relative_to) -> wx.Size
   85         
   86         If sizing is not continuous, then return a suitable size for the
   87         control which is larger than the current size.
   88         """
   89 
   90     def Realize(self):
   91         """
   92         Realize() -> bool
   93         
   94         Perform initial size and layout calculations after children have been
   95         added, and/or realize children.
   96         """
   97 
   98     def Realise(self):
   99         """
  100         Realise() -> bool
  101         
  102         Alias for Realize().
  103         """
  104 
  105     def GetAncestorRibbonBar(self):
  106         """
  107         GetAncestorRibbonBar() -> RibbonBar
  108         
  109         Get the first ancestor which is a wxRibbonBar (or derived) or NULL if
  110         not having such parent.
  111         """
  112 
  113     def GetBestSizeForParentSize(self, parentSize):
  114         """
  115         GetBestSizeForParentSize(parentSize) -> wx.Size
  116         
  117         Finds the best width and height given the parent's width and height.
  118         """
  119     AncestorRibbonBar = property(None, None)
  120     ArtProvider = property(None, None)
  121 
  122     def DoGetNextSmallerSize(self, direction, relative_to):
  123         """
  124         DoGetNextSmallerSize(direction, relative_to) -> wx.Size
  125         
  126         Implementation of GetNextSmallerSize().
  127         """
  128 
  129     def DoGetNextLargerSize(self, direction, relative_to):
  130         """
  131         DoGetNextLargerSize(direction, relative_to) -> wx.Size
  132         
  133         Implementation of GetNextLargerSize().
  134         """
  135 # end of class RibbonControl
  136 
  137 #-- end-ribbon_control --#
  138 #-- begin-ribbon_page --#
  139 
  140 class RibbonPage(RibbonControl):
  141     """
  142     RibbonPage()
  143     RibbonPage(parent, id=wx.ID_ANY, label=wx.EmptyString, icon=wx.NullBitmap, style=0)
  144     
  145     Container for related ribbon panels, and a tab within a ribbon bar.
  146     """
  147 
  148     def __init__(self, *args, **kw):
  149         """
  150         RibbonPage()
  151         RibbonPage(parent, id=wx.ID_ANY, label=wx.EmptyString, icon=wx.NullBitmap, style=0)
  152         
  153         Container for related ribbon panels, and a tab within a ribbon bar.
  154         """
  155 
  156     def Create(self, parent, id=wx.ID_ANY, label=wx.EmptyString, icon=wx.NullBitmap, style=0):
  157         """
  158         Create(parent, id=wx.ID_ANY, label=wx.EmptyString, icon=wx.NullBitmap, style=0) -> bool
  159         
  160         Create a ribbon page in two-step ribbon page construction.
  161         """
  162 
  163     def SetArtProvider(self, art):
  164         """
  165         SetArtProvider(art)
  166         
  167         Set the art provider to be used.
  168         """
  169 
  170     def GetIcon(self):
  171         """
  172         GetIcon() -> wx.Bitmap
  173         
  174         Get the icon used for the page in the ribbon bar tab area (only
  175         displayed if the ribbon bar is actually showing icons).
  176         """
  177 
  178     def SetSizeWithScrollButtonAdjustment(self, x, y, width, height):
  179         """
  180         SetSizeWithScrollButtonAdjustment(x, y, width, height)
  181         
  182         Set the size of the page and the external scroll buttons (if any).
  183         """
  184 
  185     def AdjustRectToIncludeScrollButtons(self, rect):
  186         """
  187         AdjustRectToIncludeScrollButtons(rect)
  188         
  189         Expand a rectangle of the page to include external scroll buttons (if
  190         any).
  191         """
  192 
  193     def DismissExpandedPanel(self):
  194         """
  195         DismissExpandedPanel() -> bool
  196         
  197         Dismiss the current externally expanded panel, if there is one.
  198         """
  199 
  200     def Realize(self):
  201         """
  202         Realize() -> bool
  203         
  204         Perform a full re-layout of all panels on the page.
  205         """
  206 
  207     def ScrollLines(self, lines):
  208         """
  209         ScrollLines(lines) -> bool
  210         
  211         Scroll the page by some amount up / down / left / right.
  212         """
  213 
  214     def ScrollPixels(self, pixels):
  215         """
  216         ScrollPixels(pixels) -> bool
  217         
  218         Scroll the page by a set number of pixels up / down / left / right.
  219         """
  220 
  221     def ScrollSections(self, sections):
  222         """
  223         ScrollSections(sections) -> bool
  224         
  225         Scroll the page by an entire child section.
  226         """
  227 
  228     def GetMajorAxis(self):
  229         """
  230         GetMajorAxis() -> Orientation
  231         
  232         Get the direction in which ribbon panels are stacked within the page.
  233         """
  234     Icon = property(None, None)
  235     MajorAxis = property(None, None)
  236 # end of class RibbonPage
  237 
  238 #-- end-ribbon_page --#
  239 #-- begin-ribbon_panel --#
  240 RIBBON_PANEL_NO_AUTO_MINIMISE = 0
  241 RIBBON_PANEL_EXT_BUTTON = 0
  242 RIBBON_PANEL_MINIMISE_BUTTON = 0
  243 RIBBON_PANEL_STRETCH = 0
  244 RIBBON_PANEL_FLEXIBLE = 0
  245 RIBBON_PANEL_DEFAULT_STYLE = 0
  246 wxEVT_RIBBONPANEL_EXTBUTTON_ACTIVATED = 0
  247 
  248 class RibbonPanel(RibbonControl):
  249     """
  250     RibbonPanel()
  251     RibbonPanel(parent, id=wx.ID_ANY, label=wx.EmptyString, minimised_icon=wx.NullBitmap, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_PANEL_DEFAULT_STYLE)
  252     
  253     Serves as a container for a group of (ribbon) controls.
  254     """
  255 
  256     def __init__(self, *args, **kw):
  257         """
  258         RibbonPanel()
  259         RibbonPanel(parent, id=wx.ID_ANY, label=wx.EmptyString, minimised_icon=wx.NullBitmap, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_PANEL_DEFAULT_STYLE)
  260         
  261         Serves as a container for a group of (ribbon) controls.
  262         """
  263 
  264     def Create(self, parent, id=wx.ID_ANY, label=wx.EmptyString, icon=wx.NullBitmap, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_PANEL_DEFAULT_STYLE):
  265         """
  266         Create(parent, id=wx.ID_ANY, label=wx.EmptyString, icon=wx.NullBitmap, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_PANEL_DEFAULT_STYLE) -> bool
  267         
  268         Create a ribbon panel in two-step ribbon panel construction.
  269         """
  270 
  271     def GetMinimisedIcon(self):
  272         """
  273         GetMinimisedIcon() -> wx.Bitmap
  274         
  275         Get the bitmap to be used in place of the panel children when it is
  276         minimised.
  277         """
  278 
  279     def HasExtButton(self):
  280         """
  281         HasExtButton() -> bool
  282         
  283         Test if the panel has an extension button.
  284         """
  285 
  286     def IsMinimised(self, *args, **kw):
  287         """
  288         IsMinimised() -> bool
  289         IsMinimised(at_size) -> bool
  290         
  291         Query if the panel is currently minimised.
  292         """
  293 
  294     def IsHovered(self):
  295         """
  296         IsHovered() -> bool
  297         
  298         Query is the mouse is currently hovered over the panel.
  299         """
  300 
  301     def IsExtButtonHovered(self):
  302         """
  303         IsExtButtonHovered() -> bool
  304         
  305         Query if the mouse is currently hovered over the extension button.
  306         """
  307 
  308     def CanAutoMinimise(self):
  309         """
  310         CanAutoMinimise() -> bool
  311         
  312         Query if the panel can automatically minimise itself at small sizes.
  313         """
  314 
  315     def ShowExpanded(self):
  316         """
  317         ShowExpanded() -> bool
  318         
  319         Show the panel externally expanded.
  320         """
  321 
  322     def HideExpanded(self):
  323         """
  324         HideExpanded() -> bool
  325         
  326         Hide the panel's external expansion.
  327         """
  328 
  329     def SetArtProvider(self, art):
  330         """
  331         SetArtProvider(art)
  332         
  333         Set the art provider to be used.
  334         """
  335 
  336     def Realize(self):
  337         """
  338         Realize() -> bool
  339         
  340         Realize all children of the panel.
  341         """
  342 
  343     def GetExpandedDummy(self):
  344         """
  345         GetExpandedDummy() -> RibbonPanel
  346         
  347         Get the dummy panel of an expanded panel.
  348         """
  349 
  350     def GetExpandedPanel(self):
  351         """
  352         GetExpandedPanel() -> RibbonPanel
  353         
  354         Get the expanded panel of a dummy panel.
  355         """
  356     ExpandedDummy = property(None, None)
  357     ExpandedPanel = property(None, None)
  358     MinimisedIcon = property(None, None)
  359 # end of class RibbonPanel
  360 
  361 
  362 class RibbonPanelEvent(wx.CommandEvent):
  363     """
  364     RibbonPanelEvent(command_type=wx.wxEVT_NULL, win_id=0, panel=None)
  365     
  366     Event used to indicate various actions relating to a wxRibbonPanel.
  367     """
  368 
  369     def __init__(self, command_type=wx.wxEVT_NULL, win_id=0, panel=None):
  370         """
  371         RibbonPanelEvent(command_type=wx.wxEVT_NULL, win_id=0, panel=None)
  372         
  373         Event used to indicate various actions relating to a wxRibbonPanel.
  374         """
  375 
  376     def GetPanel(self):
  377         """
  378         GetPanel() -> RibbonPanel
  379         
  380         Returns the panel relating to this event.
  381         """
  382 
  383     def SetPanel(self, page):
  384         """
  385         SetPanel(page)
  386         
  387         Sets the page relating to this event.
  388         """
  389     Panel = property(None, None)
  390 # end of class RibbonPanelEvent
  391 
  392 
  393 EVT_RIBBONPANEL_EXTBUTTON_ACTIVATED = wx.PyEventBinder(wxEVT_RIBBONPANEL_EXTBUTTON_ACTIVATED, 1)
  394 #-- end-ribbon_panel --#
  395 #-- begin-ribbon_bar --#
  396 RIBBON_BAR_SHOW_PAGE_LABELS = 0
  397 RIBBON_BAR_SHOW_PAGE_ICONS = 0
  398 RIBBON_BAR_FLOW_HORIZONTAL = 0
  399 RIBBON_BAR_FLOW_VERTICAL = 0
  400 RIBBON_BAR_SHOW_PANEL_EXT_BUTTONS = 0
  401 RIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS = 0
  402 RIBBON_BAR_ALWAYS_SHOW_TABS = 0
  403 RIBBON_BAR_SHOW_TOGGLE_BUTTON = 0
  404 RIBBON_BAR_SHOW_HELP_BUTTON = 0
  405 RIBBON_BAR_DEFAULT_STYLE = 0
  406 RIBBON_BAR_FOLDBAR_STYLE = 0
  407 RIBBON_BAR_PINNED = 0
  408 RIBBON_BAR_MINIMIZED = 0
  409 RIBBON_BAR_EXPANDED = 0
  410 wxEVT_RIBBONBAR_PAGE_CHANGED = 0
  411 wxEVT_RIBBONBAR_PAGE_CHANGING = 0
  412 wxEVT_RIBBONBAR_TAB_MIDDLE_DOWN = 0
  413 wxEVT_RIBBONBAR_TAB_MIDDLE_UP = 0
  414 wxEVT_RIBBONBAR_TAB_RIGHT_DOWN = 0
  415 wxEVT_RIBBONBAR_TAB_RIGHT_UP = 0
  416 wxEVT_RIBBONBAR_TAB_LEFT_DCLICK = 0
  417 wxEVT_RIBBONBAR_TOGGLED = 0
  418 wxEVT_RIBBONBAR_HELP_CLICK = 0
  419 
  420 class RibbonBarEvent(wx.NotifyEvent):
  421     """
  422     RibbonBarEvent(command_type=wx.wxEVT_NULL, win_id=0, page=None)
  423     
  424     Event used to indicate various actions relating to a wxRibbonBar.
  425     """
  426 
  427     def __init__(self, command_type=wx.wxEVT_NULL, win_id=0, page=None):
  428         """
  429         RibbonBarEvent(command_type=wx.wxEVT_NULL, win_id=0, page=None)
  430         
  431         Event used to indicate various actions relating to a wxRibbonBar.
  432         """
  433 
  434     def GetPage(self):
  435         """
  436         GetPage() -> RibbonPage
  437         
  438         Returns the page being changed to, or being clicked on.
  439         """
  440 
  441     def SetPage(self, page):
  442         """
  443         SetPage(page)
  444         
  445         Sets the page relating to this event.
  446         """
  447     Page = property(None, None)
  448 # end of class RibbonBarEvent
  449 
  450 
  451 class RibbonPageTabInfo(object):
  452     """
  453     
  454     """
  455     rect = property(None, None)
  456     page = property(None, None)
  457     ideal_width = property(None, None)
  458     small_begin_need_separator_width = property(None, None)
  459     small_must_have_separator_width = property(None, None)
  460     minimum_width = property(None, None)
  461     active = property(None, None)
  462     hovered = property(None, None)
  463     highlight = property(None, None)
  464     shown = property(None, None)
  465 # end of class RibbonPageTabInfo
  466 
  467 
  468 class RibbonBar(RibbonControl):
  469     """
  470     RibbonBar()
  471     RibbonBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_BAR_DEFAULT_STYLE)
  472     
  473     Top-level control in a ribbon user interface.
  474     """
  475 
  476     def __init__(self, *args, **kw):
  477         """
  478         RibbonBar()
  479         RibbonBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_BAR_DEFAULT_STYLE)
  480         
  481         Top-level control in a ribbon user interface.
  482         """
  483 
  484     def Create(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_BAR_DEFAULT_STYLE):
  485         """
  486         Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_BAR_DEFAULT_STYLE) -> bool
  487         
  488         Create a ribbon bar in two-step ribbon bar construction.
  489         """
  490 
  491     def SetTabCtrlMargins(self, left, right):
  492         """
  493         SetTabCtrlMargins(left, right)
  494         
  495         Set the margin widths (in pixels) on the left and right sides of the
  496         tab bar region of the ribbon bar.
  497         """
  498 
  499     def SetArtProvider(self, art):
  500         """
  501         SetArtProvider(art)
  502         
  503         Set the art provider to be used be the ribbon bar.
  504         """
  505 
  506     def SetActivePage(self, *args, **kw):
  507         """
  508         SetActivePage(page) -> bool
  509         SetActivePage(page) -> bool
  510         
  511         Set the active page by index, without triggering any events.
  512         """
  513 
  514     def GetActivePage(self):
  515         """
  516         GetActivePage() -> int
  517         
  518         Get the index of the active page.
  519         """
  520 
  521     def GetPage(self, n):
  522         """
  523         GetPage(n) -> RibbonPage
  524         
  525         Get a page by index.
  526         """
  527 
  528     def GetPageCount(self):
  529         """
  530         GetPageCount() -> size_t
  531         
  532         Get the number of pages in this bar.
  533         """
  534 
  535     def DismissExpandedPanel(self):
  536         """
  537         DismissExpandedPanel() -> bool
  538         
  539         Dismiss the expanded panel of the currently active page.
  540         """
  541 
  542     def GetPageNumber(self, page):
  543         """
  544         GetPageNumber(page) -> int
  545         
  546         Returns the number for a given ribbon bar page.
  547         """
  548 
  549     def DeletePage(self, n):
  550         """
  551         DeletePage(n)
  552         
  553         Delete a single page from this ribbon bar.
  554         """
  555 
  556     def ClearPages(self):
  557         """
  558         ClearPages()
  559         
  560         Delete all pages from the ribbon bar.
  561         """
  562 
  563     def IsPageShown(self, page):
  564         """
  565         IsPageShown(page) -> bool
  566         
  567         Indicates whether the tab for the given page is shown to the user or
  568         not.
  569         """
  570 
  571     def ShowPage(self, page, show_tab=True):
  572         """
  573         ShowPage(page, show_tab=True)
  574         
  575         Show or hide the tab for a given page.
  576         """
  577 
  578     def HidePage(self, page):
  579         """
  580         HidePage(page)
  581         
  582         Hides the tab for a given page.
  583         """
  584 
  585     def IsPageHighlighted(self, page):
  586         """
  587         IsPageHighlighted(page) -> bool
  588         
  589         Indicates whether a tab is currently highlighted.
  590         """
  591 
  592     def AddPageHighlight(self, page, highlight=True):
  593         """
  594         AddPageHighlight(page, highlight=True)
  595         
  596         Highlight the specified tab.
  597         """
  598 
  599     def RemovePageHighlight(self, page):
  600         """
  601         RemovePageHighlight(page)
  602         
  603         Changes a tab to not be highlighted.
  604         """
  605 
  606     def ShowPanels(self, show=True):
  607         """
  608         ShowPanels(show=True)
  609         
  610         Shows or hides the panel area of the ribbon bar.
  611         """
  612 
  613     def HidePanels(self):
  614         """
  615         HidePanels()
  616         
  617         Hides the panel area of the ribbon bar.
  618         """
  619 
  620     def ArePanelsShown(self):
  621         """
  622         ArePanelsShown() -> bool
  623         
  624         Indicates whether the panel area of the ribbon bar is shown.
  625         """
  626 
  627     def Realize(self):
  628         """
  629         Realize() -> bool
  630         
  631         Perform initial layout and size calculations of the bar and its
  632         children.
  633         """
  634     ActivePage = property(None, None)
  635     PageCount = property(None, None)
  636 # end of class RibbonBar
  637 
  638 
  639 EVT_RIBBONBAR_PAGE_CHANGED    = wx.PyEventBinder(wxEVT_RIBBONBAR_PAGE_CHANGED, 1)
  640 EVT_RIBBONBAR_PAGE_CHANGING   = wx.PyEventBinder(wxEVT_RIBBONBAR_PAGE_CHANGING,1)
  641 EVT_RIBBONBAR_TAB_MIDDLE_DOWN = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_MIDDLE_DOWN, 1)
  642 EVT_RIBBONBAR_TAB_MIDDLE_UP   = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_MIDDLE_UP, 1)
  643 EVT_RIBBONBAR_TAB_RIGHT_DOWN  = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_RIGHT_DOWN, 1)
  644 EVT_RIBBONBAR_TAB_RIGHT_UP    = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_RIGHT_UP, 1)
  645 EVT_RIBBONBAR_TAB_LEFT_DCLICK = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_LEFT_DCLICK, 1)
  646 EVT_RIBBONBAR_TOGGLED         = wx.PyEventBinder(wxEVT_RIBBONBAR_TOGGLED, 1)
  647 EVT_RIBBONBAR_HELP_CLICK      = wx.PyEventBinder(wxEVT_RIBBONBAR_HELP_CLICK, 1)
  648 #-- end-ribbon_bar --#
  649 #-- begin-ribbon_art --#
  650 RIBBON_ART_TAB_SEPARATION_SIZE = 0
  651 RIBBON_ART_PAGE_BORDER_LEFT_SIZE = 0
  652 RIBBON_ART_PAGE_BORDER_TOP_SIZE = 0
  653 RIBBON_ART_PAGE_BORDER_RIGHT_SIZE = 0
  654 RIBBON_ART_PAGE_BORDER_BOTTOM_SIZE = 0
  655 RIBBON_ART_PANEL_X_SEPARATION_SIZE = 0
  656 RIBBON_ART_PANEL_Y_SEPARATION_SIZE = 0
  657 RIBBON_ART_TOOL_GROUP_SEPARATION_SIZE = 0
  658 RIBBON_ART_GALLERY_BITMAP_PADDING_LEFT_SIZE = 0
  659 RIBBON_ART_GALLERY_BITMAP_PADDING_RIGHT_SIZE = 0
  660 RIBBON_ART_GALLERY_BITMAP_PADDING_TOP_SIZE = 0
  661 RIBBON_ART_GALLERY_BITMAP_PADDING_BOTTOM_SIZE = 0
  662 RIBBON_ART_PANEL_LABEL_FONT = 0
  663 RIBBON_ART_BUTTON_BAR_LABEL_FONT = 0
  664 RIBBON_ART_TAB_LABEL_FONT = 0
  665 RIBBON_ART_BUTTON_BAR_LABEL_COLOUR = 0
  666 RIBBON_ART_BUTTON_BAR_LABEL_DISABLED_COLOUR = 0
  667 RIBBON_ART_BUTTON_BAR_HOVER_BORDER_COLOUR = 0
  668 RIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_COLOUR = 0
  669 RIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  670 RIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_COLOUR = 0
  671 RIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_GRADIENT_COLOUR = 0
  672 RIBBON_ART_BUTTON_BAR_ACTIVE_BORDER_COLOUR = 0
  673 RIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_COLOUR = 0
  674 RIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  675 RIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_COLOUR = 0
  676 RIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_GRADIENT_COLOUR = 0
  677 RIBBON_ART_GALLERY_BORDER_COLOUR = 0
  678 RIBBON_ART_GALLERY_HOVER_BACKGROUND_COLOUR = 0
  679 RIBBON_ART_GALLERY_BUTTON_BACKGROUND_COLOUR = 0
  680 RIBBON_ART_GALLERY_BUTTON_BACKGROUND_GRADIENT_COLOUR = 0
  681 RIBBON_ART_GALLERY_BUTTON_BACKGROUND_TOP_COLOUR = 0
  682 RIBBON_ART_GALLERY_BUTTON_FACE_COLOUR = 0
  683 RIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_COLOUR = 0
  684 RIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_GRADIENT_COLOUR = 0
  685 RIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_TOP_COLOUR = 0
  686 RIBBON_ART_GALLERY_BUTTON_HOVER_FACE_COLOUR = 0
  687 RIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_COLOUR = 0
  688 RIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_GRADIENT_COLOUR = 0
  689 RIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_TOP_COLOUR = 0
  690 RIBBON_ART_GALLERY_BUTTON_ACTIVE_FACE_COLOUR = 0
  691 RIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_COLOUR = 0
  692 RIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_GRADIENT_COLOUR = 0
  693 RIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_TOP_COLOUR = 0
  694 RIBBON_ART_GALLERY_BUTTON_DISABLED_FACE_COLOUR = 0
  695 RIBBON_ART_GALLERY_ITEM_BORDER_COLOUR = 0
  696 RIBBON_ART_TAB_LABEL_COLOUR = 0
  697 RIBBON_ART_TAB_SEPARATOR_COLOUR = 0
  698 RIBBON_ART_TAB_SEPARATOR_GRADIENT_COLOUR = 0
  699 RIBBON_ART_TAB_CTRL_BACKGROUND_COLOUR = 0
  700 RIBBON_ART_TAB_CTRL_BACKGROUND_GRADIENT_COLOUR = 0
  701 RIBBON_ART_TAB_HOVER_BACKGROUND_TOP_COLOUR = 0
  702 RIBBON_ART_TAB_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  703 RIBBON_ART_TAB_HOVER_BACKGROUND_COLOUR = 0
  704 RIBBON_ART_TAB_HOVER_BACKGROUND_GRADIENT_COLOUR = 0
  705 RIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_COLOUR = 0
  706 RIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  707 RIBBON_ART_TAB_ACTIVE_BACKGROUND_COLOUR = 0
  708 RIBBON_ART_TAB_ACTIVE_BACKGROUND_GRADIENT_COLOUR = 0
  709 RIBBON_ART_TAB_BORDER_COLOUR = 0
  710 RIBBON_ART_PANEL_BORDER_COLOUR = 0
  711 RIBBON_ART_PANEL_BORDER_GRADIENT_COLOUR = 0
  712 RIBBON_ART_PANEL_MINIMISED_BORDER_COLOUR = 0
  713 RIBBON_ART_PANEL_MINIMISED_BORDER_GRADIENT_COLOUR = 0
  714 RIBBON_ART_PANEL_LABEL_BACKGROUND_COLOUR = 0
  715 RIBBON_ART_PANEL_LABEL_BACKGROUND_GRADIENT_COLOUR = 0
  716 RIBBON_ART_PANEL_LABEL_COLOUR = 0
  717 RIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_COLOUR = 0
  718 RIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_GRADIENT_COLOUR = 0
  719 RIBBON_ART_PANEL_HOVER_LABEL_COLOUR = 0
  720 RIBBON_ART_PANEL_MINIMISED_LABEL_COLOUR = 0
  721 RIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_COLOUR = 0
  722 RIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  723 RIBBON_ART_PANEL_ACTIVE_BACKGROUND_COLOUR = 0
  724 RIBBON_ART_PANEL_ACTIVE_BACKGROUND_GRADIENT_COLOUR = 0
  725 RIBBON_ART_PAGE_BORDER_COLOUR = 0
  726 RIBBON_ART_PAGE_BACKGROUND_TOP_COLOUR = 0
  727 RIBBON_ART_PAGE_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  728 RIBBON_ART_PAGE_BACKGROUND_COLOUR = 0
  729 RIBBON_ART_PAGE_BACKGROUND_GRADIENT_COLOUR = 0
  730 RIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_COLOUR = 0
  731 RIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  732 RIBBON_ART_PAGE_HOVER_BACKGROUND_COLOUR = 0
  733 RIBBON_ART_PAGE_HOVER_BACKGROUND_GRADIENT_COLOUR = 0
  734 RIBBON_ART_TOOLBAR_BORDER_COLOUR = 0
  735 RIBBON_ART_TOOLBAR_HOVER_BORDER_COLOUR = 0
  736 RIBBON_ART_TOOLBAR_FACE_COLOUR = 0
  737 RIBBON_ART_TOOL_BACKGROUND_TOP_COLOUR = 0
  738 RIBBON_ART_TOOL_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  739 RIBBON_ART_TOOL_BACKGROUND_COLOUR = 0
  740 RIBBON_ART_TOOL_BACKGROUND_GRADIENT_COLOUR = 0
  741 RIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_COLOUR = 0
  742 RIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  743 RIBBON_ART_TOOL_HOVER_BACKGROUND_COLOUR = 0
  744 RIBBON_ART_TOOL_HOVER_BACKGROUND_GRADIENT_COLOUR = 0
  745 RIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_COLOUR = 0
  746 RIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR = 0
  747 RIBBON_ART_TOOL_ACTIVE_BACKGROUND_COLOUR = 0
  748 RIBBON_ART_TOOL_ACTIVE_BACKGROUND_GRADIENT_COLOUR = 0
  749 RIBBON_SCROLL_BTN_LEFT = 0
  750 RIBBON_SCROLL_BTN_RIGHT = 0
  751 RIBBON_SCROLL_BTN_UP = 0
  752 RIBBON_SCROLL_BTN_DOWN = 0
  753 RIBBON_SCROLL_BTN_DIRECTION_MASK = 0
  754 RIBBON_SCROLL_BTN_NORMAL = 0
  755 RIBBON_SCROLL_BTN_HOVERED = 0
  756 RIBBON_SCROLL_BTN_ACTIVE = 0
  757 RIBBON_SCROLL_BTN_STATE_MASK = 0
  758 RIBBON_SCROLL_BTN_FOR_OTHER = 0
  759 RIBBON_SCROLL_BTN_FOR_TABS = 0
  760 RIBBON_SCROLL_BTN_FOR_PAGE = 0
  761 RIBBON_SCROLL_BTN_FOR_MASK = 0
  762 RIBBON_BUTTON_NORMAL = 0
  763 RIBBON_BUTTON_DROPDOWN = 0
  764 RIBBON_BUTTON_HYBRID = 0
  765 RIBBON_BUTTON_TOGGLE = 0
  766 
  767 class RibbonArtProvider(object):
  768     """
  769     RibbonArtProvider()
  770     
  771     wxRibbonArtProvider is responsible for drawing all the components of
  772     the ribbon interface.
  773     """
  774 
  775     def __init__(self):
  776         """
  777         RibbonArtProvider()
  778         
  779         wxRibbonArtProvider is responsible for drawing all the components of
  780         the ribbon interface.
  781         """
  782 
  783     def Clone(self):
  784         """
  785         Clone() -> RibbonArtProvider
  786         
  787         Create a new art provider which is a clone of this one.
  788         """
  789 
  790     def SetFlags(self, flags):
  791         """
  792         SetFlags(flags)
  793         
  794         Set the style flags.
  795         """
  796 
  797     def GetFlags(self):
  798         """
  799         GetFlags() -> long
  800         
  801         Get the previously set style flags.
  802         """
  803 
  804     def GetMetric(self, id):
  805         """
  806         GetMetric(id) -> int
  807         
  808         Get the value of a certain integer setting.
  809         """
  810 
  811     def SetMetric(self, id, new_val):
  812         """
  813         SetMetric(id, new_val)
  814         
  815         Set the value of a certain integer setting to the value new_val.
  816         """
  817 
  818     def SetFont(self, id, font):
  819         """
  820         SetFont(id, font)
  821         
  822         Set the value of a certain font setting to the value font.
  823         """
  824 
  825     def GetFont(self, id):
  826         """
  827         GetFont(id) -> wx.Font
  828         
  829         Get the value of a certain font setting.
  830         """
  831 
  832     def GetColour(self, id):
  833         """
  834         GetColour(id) -> wx.Colour
  835         
  836         Get the value of a certain colour setting.
  837         """
  838 
  839     def SetColour(self, id, colour):
  840         """
  841         SetColour(id, colour)
  842         
  843         Set the value of a certain colour setting to the value colour.
  844         """
  845 
  846     def GetColor(self, id):
  847         """
  848         GetColor(id) -> wx.Colour
  849         """
  850 
  851     def SetColor(self, id, color):
  852         """
  853         SetColor(id, color)
  854         """
  855 
  856     def GetColourScheme(self):
  857         """
  858         GetColourScheme() -> (primary, secondary, tertiary)
  859         
  860         Get the current colour scheme.
  861         """
  862 
  863     def SetColourScheme(self, primary, secondary, tertiary):
  864         """
  865         SetColourScheme(primary, secondary, tertiary)
  866         
  867         Set all applicable colour settings from a few base colours.
  868         """
  869 
  870     def DrawTabCtrlBackground(self, dc, wnd, rect):
  871         """
  872         DrawTabCtrlBackground(dc, wnd, rect)
  873         
  874         Draw the background of the tab region of a ribbon bar.
  875         """
  876 
  877     def DrawTab(self, dc, wnd, tab):
  878         """
  879         DrawTab(dc, wnd, tab)
  880         
  881         Draw a single tab in the tab region of a ribbon bar.
  882         """
  883 
  884     def DrawTabSeparator(self, dc, wnd, rect, visibility):
  885         """
  886         DrawTabSeparator(dc, wnd, rect, visibility)
  887         
  888         Draw a separator between two tabs in a ribbon bar.
  889         """
  890 
  891     def DrawPageBackground(self, dc, wnd, rect):
  892         """
  893         DrawPageBackground(dc, wnd, rect)
  894         
  895         Draw the background of a ribbon page.
  896         """
  897 
  898     def DrawScrollButton(self, dc, wnd, rect, style):
  899         """
  900         DrawScrollButton(dc, wnd, rect, style)
  901         
  902         Draw a ribbon-style scroll button.
  903         """
  904 
  905     def DrawPanelBackground(self, dc, wnd, rect):
  906         """
  907         DrawPanelBackground(dc, wnd, rect)
  908         
  909         Draw the background and chrome for a ribbon panel.
  910         """
  911 
  912     def DrawGalleryBackground(self, dc, wnd, rect):
  913         """
  914         DrawGalleryBackground(dc, wnd, rect)
  915         
  916         Draw the background and chrome for a wxRibbonGallery control.
  917         """
  918 
  919     def DrawGalleryItemBackground(self, dc, wnd, rect, item):
  920         """
  921         DrawGalleryItemBackground(dc, wnd, rect, item)
  922         
  923         Draw the background of a single item in a wxRibbonGallery control.
  924         """
  925 
  926     def DrawMinimisedPanel(self, dc, wnd, rect, bitmap):
  927         """
  928         DrawMinimisedPanel(dc, wnd, rect, bitmap)
  929         
  930         Draw a minimised ribbon panel.
  931         """
  932 
  933     def DrawButtonBarBackground(self, dc, wnd, rect):
  934         """
  935         DrawButtonBarBackground(dc, wnd, rect)
  936         
  937         Draw the background for a wxRibbonButtonBar control.
  938         """
  939 
  940     def DrawButtonBarButton(self, dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small):
  941         """
  942         DrawButtonBarButton(dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small)
  943         
  944         Draw a single button for a wxRibbonButtonBar control.
  945         """
  946 
  947     def DrawToolBarBackground(self, dc, wnd, rect):
  948         """
  949         DrawToolBarBackground(dc, wnd, rect)
  950         
  951         Draw the background for a wxRibbonToolBar control.
  952         """
  953 
  954     def DrawToolGroupBackground(self, dc, wnd, rect):
  955         """
  956         DrawToolGroupBackground(dc, wnd, rect)
  957         
  958         Draw the background for a group of tools on a wxRibbonToolBar control.
  959         """
  960 
  961     def DrawTool(self, dc, wnd, rect, bitmap, kind, state):
  962         """
  963         DrawTool(dc, wnd, rect, bitmap, kind, state)
  964         
  965         Draw a single tool (for a wxRibbonToolBar control).
  966         """
  967 
  968     def DrawToggleButton(self, dc, wnd, rect, mode):
  969         """
  970         DrawToggleButton(dc, wnd, rect, mode)
  971         
  972         Draw toggle button on wxRibbonBar.
  973         """
  974 
  975     def DrawHelpButton(self, dc, wnd, rect):
  976         """
  977         DrawHelpButton(dc, wnd, rect)
  978         
  979         Draw help button on wxRibbonBar.
  980         """
  981 
  982     def GetBarTabWidth(self, dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum):
  983         """
  984         GetBarTabWidth(dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum)
  985         
  986         Calculate the ideal and minimum width (in pixels) of a tab in a ribbon
  987         bar.
  988         """
  989 
  990     def GetTabCtrlHeight(self, dc, wnd, pages):
  991         """
  992         GetTabCtrlHeight(dc, wnd, pages) -> int
  993         
  994         Calculate the height (in pixels) of the tab region of a ribbon bar.
  995         """
  996 
  997     def GetScrollButtonMinimumSize(self, dc, wnd, style):
  998         """
  999         GetScrollButtonMinimumSize(dc, wnd, style) -> wx.Size
 1000         
 1001         Calculate the minimum size (in pixels) of a scroll button.
 1002         """
 1003 
 1004     def GetPanelSize(self, dc, wnd, client_size, client_offset):
 1005         """
 1006         GetPanelSize(dc, wnd, client_size, client_offset) -> wx.Size
 1007         
 1008         Calculate the size of a panel for a given client size.
 1009         """
 1010 
 1011     def GetPanelClientSize(self, dc, wnd, size, client_offset):
 1012         """
 1013         GetPanelClientSize(dc, wnd, size, client_offset) -> wx.Size
 1014         
 1015         Calculate the client size of a panel for a given overall size.
 1016         """
 1017 
 1018     def GetPanelExtButtonArea(self, dc, wnd, rect):
 1019         """
 1020         GetPanelExtButtonArea(dc, wnd, rect) -> wx.Rect
 1021         
 1022         Calculate the position and size of the panel extension button.
 1023         """
 1024 
 1025     def GetGallerySize(self, dc, wnd, client_size):
 1026         """
 1027         GetGallerySize(dc, wnd, client_size) -> wx.Size
 1028         
 1029         Calculate the size of a wxRibbonGallery control for a given client
 1030         size.
 1031         """
 1032 
 1033     def GetGalleryClientSize(self, dc, wnd, size, client_offset, scroll_up_button, scroll_down_button, extension_button):
 1034         """
 1035         GetGalleryClientSize(dc, wnd, size, client_offset, scroll_up_button, scroll_down_button, extension_button) -> wx.Size
 1036         
 1037         Calculate the client size of a wxRibbonGallery control for a given
 1038         size.
 1039         """
 1040 
 1041     def GetPageBackgroundRedrawArea(self, dc, wnd, page_old_size, page_new_size):
 1042         """
 1043         GetPageBackgroundRedrawArea(dc, wnd, page_old_size, page_new_size) -> wx.Rect
 1044         
 1045         Calculate the portion of a page background which needs to be redrawn
 1046         when a page is resized.
 1047         """
 1048 
 1049     def GetButtonBarButtonSize(self, dc, wnd, kind, size, label, bitmap_size_large, bitmap_size_small, button_size, normal_region, dropdown_region):
 1050         """
 1051         GetButtonBarButtonSize(dc, wnd, kind, size, label, bitmap_size_large, bitmap_size_small, button_size, normal_region, dropdown_region) -> bool
 1052         
 1053         Calculate the size of a button within a wxRibbonButtonBar.
 1054         """
 1055 
 1056     def GetMinimisedPanelMinimumSize(self, dc, wnd, desired_bitmap_size, expanded_panel_direction):
 1057         """
 1058         GetMinimisedPanelMinimumSize(dc, wnd, desired_bitmap_size, expanded_panel_direction) -> wx.Size
 1059         
 1060         Calculate the size of a minimised ribbon panel.
 1061         """
 1062 
 1063     def GetToolSize(self, dc, wnd, bitmap_size, kind, is_first, is_last, dropdown_region):
 1064         """
 1065         GetToolSize(dc, wnd, bitmap_size, kind, is_first, is_last, dropdown_region) -> wx.Size
 1066         
 1067         Calculate the size of a tool within a wxRibbonToolBar.
 1068         """
 1069 
 1070     def GetBarToggleButtonArea(self, rect):
 1071         """
 1072         GetBarToggleButtonArea(rect) -> wx.Rect
 1073         
 1074         Calculate the position and size of the ribbon's toggle button.
 1075         """
 1076 
 1077     def GetRibbonHelpButtonArea(self, rect):
 1078         """
 1079         GetRibbonHelpButtonArea(rect) -> wx.Rect
 1080         
 1081         Calculate the position and size of the ribbon's help button.
 1082         """
 1083     Flags = property(None, None)
 1084 # end of class RibbonArtProvider
 1085 
 1086 
 1087 class RibbonMSWArtProvider(RibbonArtProvider):
 1088     """
 1089     RibbonMSWArtProvider(set_colour_scheme=True)
 1090     """
 1091 
 1092     def __init__(self, set_colour_scheme=True):
 1093         """
 1094         RibbonMSWArtProvider(set_colour_scheme=True)
 1095         """
 1096 
 1097     def Clone(self):
 1098         """
 1099         Clone() -> RibbonArtProvider
 1100         
 1101         Create a new art provider which is a clone of this one.
 1102         """
 1103 
 1104     def SetFlags(self, flags):
 1105         """
 1106         SetFlags(flags)
 1107         
 1108         Set the style flags.
 1109         """
 1110 
 1111     def GetFlags(self):
 1112         """
 1113         GetFlags() -> long
 1114         
 1115         Get the previously set style flags.
 1116         """
 1117 
 1118     def GetMetric(self, id):
 1119         """
 1120         GetMetric(id) -> int
 1121         
 1122         Get the value of a certain integer setting.
 1123         """
 1124 
 1125     def SetMetric(self, id, new_val):
 1126         """
 1127         SetMetric(id, new_val)
 1128         
 1129         Set the value of a certain integer setting to the value new_val.
 1130         """
 1131 
 1132     def SetFont(self, id, font):
 1133         """
 1134         SetFont(id, font)
 1135         
 1136         Set the value of a certain font setting to the value font.
 1137         """
 1138 
 1139     def GetFont(self, id):
 1140         """
 1141         GetFont(id) -> wx.Font
 1142         
 1143         Get the value of a certain font setting.
 1144         """
 1145 
 1146     def GetColour(self, id):
 1147         """
 1148         GetColour(id) -> wx.Colour
 1149         
 1150         Get the value of a certain colour setting.
 1151         """
 1152 
 1153     def SetColour(self, id, colour):
 1154         """
 1155         SetColour(id, colour)
 1156         
 1157         Set the value of a certain colour setting to the value colour.
 1158         """
 1159 
 1160     def GetColourScheme(self):
 1161         """
 1162         GetColourScheme() -> (primary, secondary, tertiary)
 1163         
 1164         Get the current colour scheme.
 1165         """
 1166 
 1167     def SetColourScheme(self, primary, secondary, tertiary):
 1168         """
 1169         SetColourScheme(primary, secondary, tertiary)
 1170         
 1171         Set all applicable colour settings from a few base colours.
 1172         """
 1173 
 1174     def GetTabCtrlHeight(self, dc, wnd, pages):
 1175         """
 1176         GetTabCtrlHeight(dc, wnd, pages) -> int
 1177         
 1178         Calculate the height (in pixels) of the tab region of a ribbon bar.
 1179         """
 1180 
 1181     def DrawTabCtrlBackground(self, dc, wnd, rect):
 1182         """
 1183         DrawTabCtrlBackground(dc, wnd, rect)
 1184         
 1185         Draw the background of the tab region of a ribbon bar.
 1186         """
 1187 
 1188     def DrawTab(self, dc, wnd, tab):
 1189         """
 1190         DrawTab(dc, wnd, tab)
 1191         
 1192         Draw a single tab in the tab region of a ribbon bar.
 1193         """
 1194 
 1195     def DrawTabSeparator(self, dc, wnd, rect, visibility):
 1196         """
 1197         DrawTabSeparator(dc, wnd, rect, visibility)
 1198         
 1199         Draw a separator between two tabs in a ribbon bar.
 1200         """
 1201 
 1202     def DrawPageBackground(self, dc, wnd, rect):
 1203         """
 1204         DrawPageBackground(dc, wnd, rect)
 1205         
 1206         Draw the background of a ribbon page.
 1207         """
 1208 
 1209     def DrawScrollButton(self, dc, wnd, rect, style):
 1210         """
 1211         DrawScrollButton(dc, wnd, rect, style)
 1212         
 1213         Draw a ribbon-style scroll button.
 1214         """
 1215 
 1216     def DrawPanelBackground(self, dc, wnd, rect):
 1217         """
 1218         DrawPanelBackground(dc, wnd, rect)
 1219         
 1220         Draw the background and chrome for a ribbon panel.
 1221         """
 1222 
 1223     def DrawGalleryBackground(self, dc, wnd, rect):
 1224         """
 1225         DrawGalleryBackground(dc, wnd, rect)
 1226         
 1227         Draw the background and chrome for a wxRibbonGallery control.
 1228         """
 1229 
 1230     def DrawGalleryItemBackground(self, dc, wnd, rect, item):
 1231         """
 1232         DrawGalleryItemBackground(dc, wnd, rect, item)
 1233         
 1234         Draw the background of a single item in a wxRibbonGallery control.
 1235         """
 1236 
 1237     def DrawMinimisedPanel(self, dc, wnd, rect, bitmap):
 1238         """
 1239         DrawMinimisedPanel(dc, wnd, rect, bitmap)
 1240         
 1241         Draw a minimised ribbon panel.
 1242         """
 1243 
 1244     def DrawButtonBarBackground(self, dc, wnd, rect):
 1245         """
 1246         DrawButtonBarBackground(dc, wnd, rect)
 1247         
 1248         Draw the background for a wxRibbonButtonBar control.
 1249         """
 1250 
 1251     def DrawButtonBarButton(self, dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small):
 1252         """
 1253         DrawButtonBarButton(dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small)
 1254         
 1255         Draw a single button for a wxRibbonButtonBar control.
 1256         """
 1257 
 1258     def DrawToolBarBackground(self, dc, wnd, rect):
 1259         """
 1260         DrawToolBarBackground(dc, wnd, rect)
 1261         
 1262         Draw the background for a wxRibbonToolBar control.
 1263         """
 1264 
 1265     def DrawToolGroupBackground(self, dc, wnd, rect):
 1266         """
 1267         DrawToolGroupBackground(dc, wnd, rect)
 1268         
 1269         Draw the background for a group of tools on a wxRibbonToolBar control.
 1270         """
 1271 
 1272     def DrawTool(self, dc, wnd, rect, bitmap, kind, state):
 1273         """
 1274         DrawTool(dc, wnd, rect, bitmap, kind, state)
 1275         
 1276         Draw a single tool (for a wxRibbonToolBar control).
 1277         """
 1278 
 1279     def DrawToggleButton(self, dc, wnd, rect, mode):
 1280         """
 1281         DrawToggleButton(dc, wnd, rect, mode)
 1282         
 1283         Draw toggle button on wxRibbonBar.
 1284         """
 1285 
 1286     def DrawHelpButton(self, dc, wnd, rect):
 1287         """
 1288         DrawHelpButton(dc, wnd, rect)
 1289         
 1290         Draw help button on wxRibbonBar.
 1291         """
 1292 
 1293     def GetBarTabWidth(self, dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum):
 1294         """
 1295         GetBarTabWidth(dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum)
 1296         
 1297         Calculate the ideal and minimum width (in pixels) of a tab in a ribbon
 1298         bar.
 1299         """
 1300 
 1301     def GetScrollButtonMinimumSize(self, dc, wnd, style):
 1302         """
 1303         GetScrollButtonMinimumSize(dc, wnd, style) -> wx.Size
 1304         
 1305         Calculate the minimum size (in pixels) of a scroll button.
 1306         """
 1307 
 1308     def GetPanelSize(self, dc, wnd, client_size, client_offset):
 1309         """
 1310         GetPanelSize(dc, wnd, client_size, client_offset) -> wx.Size
 1311         
 1312         Calculate the size of a panel for a given client size.
 1313         """
 1314 
 1315     def GetPanelClientSize(self, dc, wnd, size, client_offset):
 1316         """
 1317         GetPanelClientSize(dc, wnd, size, client_offset) -> wx.Size
 1318         
 1319         Calculate the client size of a panel for a given overall size.
 1320         """
 1321 
 1322     def GetPanelExtButtonArea(self, dc, wnd, rect):
 1323         """
 1324         GetPanelExtButtonArea(dc, wnd, rect) -> wx.Rect
 1325         
 1326         Calculate the position and size of the panel extension button.
 1327         """
 1328 
 1329     def GetGallerySize(self, dc, wnd, client_size):
 1330         """
 1331         GetGallerySize(dc, wnd, client_size) -> wx.Size
 1332         
 1333         Calculate the size of a wxRibbonGallery control for a given client
 1334         size.
 1335         """
 1336 
 1337     def GetGalleryClientSize(self, dc, wnd, size, client_offset, scroll_up_button, scroll_down_button, extension_button):
 1338         """
 1339         GetGalleryClientSize(dc, wnd, size, client_offset, scroll_up_button, scroll_down_button, extension_button) -> wx.Size
 1340         
 1341         Calculate the client size of a wxRibbonGallery control for a given
 1342         size.
 1343         """
 1344 
 1345     def GetPageBackgroundRedrawArea(self, dc, wnd, page_old_size, page_new_size):
 1346         """
 1347         GetPageBackgroundRedrawArea(dc, wnd, page_old_size, page_new_size) -> wx.Rect
 1348         
 1349         Calculate the portion of a page background which needs to be redrawn
 1350         when a page is resized.
 1351         """
 1352 
 1353     def GetButtonBarButtonSize(self, dc, wnd, kind, size, label, bitmap_size_large, bitmap_size_small, button_size, normal_region, dropdown_region):
 1354         """
 1355         GetButtonBarButtonSize(dc, wnd, kind, size, label, bitmap_size_large, bitmap_size_small, button_size, normal_region, dropdown_region) -> bool
 1356         
 1357         Calculate the size of a button within a wxRibbonButtonBar.
 1358         """
 1359 
 1360     def GetMinimisedPanelMinimumSize(self, dc, wnd, desired_bitmap_size, expanded_panel_direction):
 1361         """
 1362         GetMinimisedPanelMinimumSize(dc, wnd, desired_bitmap_size, expanded_panel_direction) -> wx.Size
 1363         
 1364         Calculate the size of a minimised ribbon panel.
 1365         """
 1366 
 1367     def GetToolSize(self, dc, wnd, bitmap_size, kind, is_first, is_last, dropdown_region):
 1368         """
 1369         GetToolSize(dc, wnd, bitmap_size, kind, is_first, is_last, dropdown_region) -> wx.Size
 1370         
 1371         Calculate the size of a tool within a wxRibbonToolBar.
 1372         """
 1373 
 1374     def GetBarToggleButtonArea(self, rect):
 1375         """
 1376         GetBarToggleButtonArea(rect) -> wx.Rect
 1377         
 1378         Calculate the position and size of the ribbon's toggle button.
 1379         """
 1380 
 1381     def GetRibbonHelpButtonArea(self, rect):
 1382         """
 1383         GetRibbonHelpButtonArea(rect) -> wx.Rect
 1384         
 1385         Calculate the position and size of the ribbon's help button.
 1386         """
 1387     Flags = property(None, None)
 1388 # end of class RibbonMSWArtProvider
 1389 
 1390 
 1391 class RibbonAUIArtProvider(RibbonMSWArtProvider):
 1392     """
 1393     RibbonAUIArtProvider()
 1394     """
 1395 
 1396     def __init__(self):
 1397         """
 1398         RibbonAUIArtProvider()
 1399         """
 1400 
 1401     def Clone(self):
 1402         """
 1403         Clone() -> RibbonArtProvider
 1404         
 1405         Create a new art provider which is a clone of this one.
 1406         """
 1407 
 1408     def GetColour(self, id):
 1409         """
 1410         GetColour(id) -> wx.Colour
 1411         
 1412         Get the value of a certain colour setting.
 1413         """
 1414 
 1415     def SetColour(self, id, colour):
 1416         """
 1417         SetColour(id, colour)
 1418         
 1419         Set the value of a certain colour setting to the value colour.
 1420         """
 1421 
 1422     def SetColourScheme(self, primary, secondary, tertiary):
 1423         """
 1424         SetColourScheme(primary, secondary, tertiary)
 1425         
 1426         Set all applicable colour settings from a few base colours.
 1427         """
 1428 
 1429     def SetFont(self, id, font):
 1430         """
 1431         SetFont(id, font)
 1432         
 1433         Set the value of a certain font setting to the value font.
 1434         """
 1435 
 1436     def GetScrollButtonMinimumSize(self, dc, wnd, style):
 1437         """
 1438         GetScrollButtonMinimumSize(dc, wnd, style) -> wx.Size
 1439         
 1440         Calculate the minimum size (in pixels) of a scroll button.
 1441         """
 1442 
 1443     def DrawScrollButton(self, dc, wnd, rect, style):
 1444         """
 1445         DrawScrollButton(dc, wnd, rect, style)
 1446         
 1447         Draw a ribbon-style scroll button.
 1448         """
 1449 
 1450     def GetPanelSize(self, dc, wnd, client_size, client_offset):
 1451         """
 1452         GetPanelSize(dc, wnd, client_size, client_offset) -> wx.Size
 1453         
 1454         Calculate the size of a panel for a given client size.
 1455         """
 1456 
 1457     def GetPanelClientSize(self, dc, wnd, size, client_offset):
 1458         """
 1459         GetPanelClientSize(dc, wnd, size, client_offset) -> wx.Size
 1460         
 1461         Calculate the client size of a panel for a given overall size.
 1462         """
 1463 
 1464     def GetPanelExtButtonArea(self, dc, wnd, rect):
 1465         """
 1466         GetPanelExtButtonArea(dc, wnd, rect) -> wx.Rect
 1467         
 1468         Calculate the position and size of the panel extension button.
 1469         """
 1470 
 1471     def DrawTabCtrlBackground(self, dc, wnd, rect):
 1472         """
 1473         DrawTabCtrlBackground(dc, wnd, rect)
 1474         
 1475         Draw the background of the tab region of a ribbon bar.
 1476         """
 1477 
 1478     def GetTabCtrlHeight(self, dc, wnd, pages):
 1479         """
 1480         GetTabCtrlHeight(dc, wnd, pages) -> int
 1481         
 1482         Calculate the height (in pixels) of the tab region of a ribbon bar.
 1483         """
 1484 
 1485     def GetBarTabWidth(self, dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum):
 1486         """
 1487         GetBarTabWidth(dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum)
 1488         
 1489         Calculate the ideal and minimum width (in pixels) of a tab in a ribbon
 1490         bar.
 1491         """
 1492 
 1493     def DrawTab(self, dc, wnd, tab):
 1494         """
 1495         DrawTab(dc, wnd, tab)
 1496         
 1497         Draw a single tab in the tab region of a ribbon bar.
 1498         """
 1499 
 1500     def DrawTabSeparator(self, dc, wnd, rect, visibility):
 1501         """
 1502         DrawTabSeparator(dc, wnd, rect, visibility)
 1503         
 1504         Draw a separator between two tabs in a ribbon bar.
 1505         """
 1506 
 1507     def DrawPageBackground(self, dc, wnd, rect):
 1508         """
 1509         DrawPageBackground(dc, wnd, rect)
 1510         
 1511         Draw the background of a ribbon page.
 1512         """
 1513 
 1514     def DrawPanelBackground(self, dc, wnd, rect):
 1515         """
 1516         DrawPanelBackground(dc, wnd, rect)
 1517         
 1518         Draw the background and chrome for a ribbon panel.
 1519         """
 1520 
 1521     def DrawMinimisedPanel(self, dc, wnd, rect, bitmap):
 1522         """
 1523         DrawMinimisedPanel(dc, wnd, rect, bitmap)
 1524         
 1525         Draw a minimised ribbon panel.
 1526         """
 1527 
 1528     def DrawGalleryBackground(self, dc, wnd, rect):
 1529         """
 1530         DrawGalleryBackground(dc, wnd, rect)
 1531         
 1532         Draw the background and chrome for a wxRibbonGallery control.
 1533         """
 1534 
 1535     def DrawGalleryItemBackground(self, dc, wnd, rect, item):
 1536         """
 1537         DrawGalleryItemBackground(dc, wnd, rect, item)
 1538         
 1539         Draw the background of a single item in a wxRibbonGallery control.
 1540         """
 1541 
 1542     def DrawButtonBarBackground(self, dc, wnd, rect):
 1543         """
 1544         DrawButtonBarBackground(dc, wnd, rect)
 1545         
 1546         Draw the background for a wxRibbonButtonBar control.
 1547         """
 1548 
 1549     def DrawButtonBarButton(self, dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small):
 1550         """
 1551         DrawButtonBarButton(dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small)
 1552         
 1553         Draw a single button for a wxRibbonButtonBar control.
 1554         """
 1555 
 1556     def DrawToolBarBackground(self, dc, wnd, rect):
 1557         """
 1558         DrawToolBarBackground(dc, wnd, rect)
 1559         
 1560         Draw the background for a wxRibbonToolBar control.
 1561         """
 1562 
 1563     def DrawToolGroupBackground(self, dc, wnd, rect):
 1564         """
 1565         DrawToolGroupBackground(dc, wnd, rect)
 1566         
 1567         Draw the background for a group of tools on a wxRibbonToolBar control.
 1568         """
 1569 
 1570     def DrawTool(self, dc, wnd, rect, bitmap, kind, state):
 1571         """
 1572         DrawTool(dc, wnd, rect, bitmap, kind, state)
 1573         
 1574         Draw a single tool (for a wxRibbonToolBar control).
 1575         """
 1576 # end of class RibbonAUIArtProvider
 1577 
 1578 
 1579 if 'wxMSW' in wx.PlatformInfo:
 1580     RibbonDefaultArtProvider = RibbonMSWArtProvider
 1581 else:
 1582     RibbonDefaultArtProvider = RibbonAUIArtProvider
 1583 #-- end-ribbon_art --#
 1584 #-- begin-ribbon_buttonbar --#
 1585 RIBBON_BUTTONBAR_BUTTON_SMALL = 0
 1586 RIBBON_BUTTONBAR_BUTTON_MEDIUM = 0
 1587 RIBBON_BUTTONBAR_BUTTON_LARGE = 0
 1588 RIBBON_BUTTONBAR_BUTTON_SIZE_MASK = 0
 1589 RIBBON_BUTTONBAR_BUTTON_NORMAL_HOVERED = 0
 1590 RIBBON_BUTTONBAR_BUTTON_DROPDOWN_HOVERED = 0
 1591 RIBBON_BUTTONBAR_BUTTON_HOVER_MASK = 0
 1592 RIBBON_BUTTONBAR_BUTTON_NORMAL_ACTIVE = 0
 1593 RIBBON_BUTTONBAR_BUTTON_DROPDOWN_ACTIVE = 0
 1594 RIBBON_BUTTONBAR_BUTTON_ACTIVE_MASK = 0
 1595 RIBBON_BUTTONBAR_BUTTON_DISABLED = 0
 1596 RIBBON_BUTTONBAR_BUTTON_TOGGLED = 0
 1597 RIBBON_BUTTONBAR_BUTTON_STATE_MASK = 0
 1598 wxEVT_RIBBONBUTTONBAR_CLICKED = 0
 1599 wxEVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED = 0
 1600 
 1601 class RibbonButtonBar(RibbonControl):
 1602     """
 1603     RibbonButtonBar()
 1604     RibbonButtonBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
 1605     
 1606     A ribbon button bar is similar to a traditional toolbar.
 1607     """
 1608 
 1609     def __init__(self, *args, **kw):
 1610         """
 1611         RibbonButtonBar()
 1612         RibbonButtonBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
 1613         
 1614         A ribbon button bar is similar to a traditional toolbar.
 1615         """
 1616 
 1617     def Create(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0):
 1618         """
 1619         Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
 1620         
 1621         Create a button bar in two-step button bar construction.
 1622         """
 1623 
 1624     def AddButton(self, *args, **kw):
 1625         """
 1626         AddButton(button_id, label, bitmap, help_string, kind=RIBBON_BUTTON_NORMAL) -> RibbonButtonBarButtonBase
 1627         AddButton(button_id, label, bitmap, bitmap_small=wx.NullBitmap, bitmap_disabled=wx.NullBitmap, bitmap_small_disabled=wx.NullBitmap, kind=RIBBON_BUTTON_NORMAL, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
 1628         
 1629         Add a button to the button bar (simple version).
 1630         """
 1631 
 1632     def AddDropdownButton(self, button_id, label, bitmap, help_string=wx.EmptyString):
 1633         """
 1634         AddDropdownButton(button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
 1635         
 1636         Add a dropdown button to the button bar (simple version).
 1637         """
 1638 
 1639     def AddHybridButton(self, button_id, label, bitmap, help_string=wx.EmptyString):
 1640         """
 1641         AddHybridButton(button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
 1642         
 1643         Add a hybrid button to the button bar (simple version).
 1644         """
 1645 
 1646     def AddToggleButton(self, button_id, label, bitmap, help_string=wx.EmptyString):
 1647         """
 1648         AddToggleButton(button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
 1649         
 1650         Add a toggle button to the button bar (simple version).
 1651         """
 1652 
 1653     def InsertButton(self, *args, **kw):
 1654         """
 1655         InsertButton(pos, button_id, label, bitmap, help_string, kind=RIBBON_BUTTON_NORMAL) -> RibbonButtonBarButtonBase
 1656         InsertButton(pos, button_id, label, bitmap, bitmap_small=wx.NullBitmap, bitmap_disabled=wx.NullBitmap, bitmap_small_disabled=wx.NullBitmap, kind=RIBBON_BUTTON_NORMAL, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
 1657         
 1658         Inserts a button to the button bar (simple version) at the given
 1659         position.
 1660         """
 1661 
 1662     def InsertDropdownButton(self, pos, button_id, label, bitmap, help_string=wx.EmptyString):
 1663         """
 1664         InsertDropdownButton(pos, button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
 1665         
 1666         Inserts a dropdown button to the button bar (simple version) at the
 1667         given position.
 1668         """
 1669 
 1670     def InsertHybridButton(self, pos, button_id, label, bitmap, help_string=wx.EmptyString):
 1671         """
 1672         InsertHybridButton(pos, button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
 1673         
 1674         Inserts a hybrid button to the button bar (simple version) at the
 1675         given position.
 1676         """
 1677 
 1678     def InsertToggleButton(self, pos, button_id, label, bitmap, help_string=wx.EmptyString):
 1679         """
 1680         InsertToggleButton(pos, button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
 1681         
 1682         Inserts a toggle button to the button bar (simple version) at the
 1683         given position.
 1684         """
 1685 
 1686     def GetButtonCount(self):
 1687         """
 1688         GetButtonCount() -> size_t
 1689         
 1690         Returns the number of buttons in this button bar.
 1691         """
 1692 
 1693     def SetItemClientData(self, item, data):
 1694         """
 1695         SetItemClientData(item, data)
 1696         
 1697         Set the client object associated with a button.
 1698         """
 1699 
 1700     def GetItemClientData(self, item):
 1701         """
 1702         GetItemClientData(item) -> ClientData
 1703         
 1704         Get the client object associated with a button.
 1705         """
 1706 
 1707     def GetItem(self, n):
 1708         """
 1709         GetItem(n) -> RibbonButtonBarButtonBase
 1710         
 1711         Returns the N-th button of the bar.
 1712         """
 1713 
 1714     def GetItemById(self, id):
 1715         """
 1716         GetItemById(id) -> RibbonButtonBarButtonBase
 1717         
 1718         Returns the first button having a given id or NULL if none matches.
 1719         """
 1720 
 1721     def GetItemId(self, item):
 1722         """
 1723         GetItemId(item) -> int
 1724         
 1725         Returns the id of a button.
 1726         """
 1727 
 1728     def Realize(self):
 1729         """
 1730         Realize() -> bool
 1731         
 1732         Calculate button layouts and positions.
 1733         """
 1734 
 1735     def ClearButtons(self):
 1736         """
 1737         ClearButtons()
 1738         
 1739         Delete all buttons from the button bar.
 1740         """
 1741 
 1742     def DeleteButton(self, button_id):
 1743         """
 1744         DeleteButton(button_id) -> bool
 1745         
 1746         Delete a single button from the button bar.
 1747         """
 1748 
 1749     def EnableButton(self, button_id, enable=True):
 1750         """
 1751         EnableButton(button_id, enable=True)
 1752         
 1753         Enable or disable a single button on the bar.
 1754         """
 1755 
 1756     def ToggleButton(self, button_id, checked):
 1757         """
 1758         ToggleButton(button_id, checked)
 1759         
 1760         Set a toggle button to the checked or unchecked state.
 1761         """
 1762 
 1763     def GetActiveItem(self):
 1764         """
 1765         GetActiveItem() -> RibbonButtonBarButtonBase
 1766         
 1767         Returns the active item of the button bar or NULL if there is none.
 1768         """
 1769 
 1770     def GetHoveredItem(self):
 1771         """
 1772         GetHoveredItem() -> RibbonButtonBarButtonBase
 1773         
 1774         Returns the hovered item of the button bar or NULL if there is none.
 1775         """
 1776 
 1777     def SetShowToolTipsForDisabled(self, show):
 1778         """
 1779         SetShowToolTipsForDisabled(show)
 1780         
 1781         Indicates whether tooltips are shown for disabled buttons.
 1782         """
 1783 
 1784     def GetShowToolTipsForDisabled(self):
 1785         """
 1786         GetShowToolTipsForDisabled() -> bool
 1787         
 1788         Sets whether tooltips should be shown for disabled buttons or not.
 1789         """
 1790     ActiveItem = property(None, None)
 1791     ButtonCount = property(None, None)
 1792     HoveredItem = property(None, None)
 1793     ShowToolTipsForDisabled = property(None, None)
 1794 # end of class RibbonButtonBar
 1795 
 1796 
 1797 class RibbonButtonBarEvent(wx.CommandEvent):
 1798     """
 1799     RibbonButtonBarEvent(command_type=wx.wxEVT_NULL, win_id=0, bar=None, button=None)
 1800     
 1801     Event used to indicate various actions relating to a button on a
 1802     wxRibbonButtonBar.
 1803     """
 1804 
 1805     def __init__(self, command_type=wx.wxEVT_NULL, win_id=0, bar=None, button=None):
 1806         """
 1807         RibbonButtonBarEvent(command_type=wx.wxEVT_NULL, win_id=0, bar=None, button=None)
 1808         
 1809         Event used to indicate various actions relating to a button on a
 1810         wxRibbonButtonBar.
 1811         """
 1812 
 1813     def GetBar(self):
 1814         """
 1815         GetBar() -> RibbonButtonBar
 1816         
 1817         Returns the bar which contains the button which the event relates to.
 1818         """
 1819 
 1820     def SetBar(self, bar):
 1821         """
 1822         SetBar(bar)
 1823         
 1824         Sets the button bar relating to this event.
 1825         """
 1826 
 1827     def GetButton(self):
 1828         """
 1829         GetButton() -> RibbonButtonBarButtonBase
 1830         
 1831         Returns the button which the event relates to.
 1832         """
 1833 
 1834     def SetButton(self, bar):
 1835         """
 1836         SetButton(bar)
 1837         
 1838         Sets the button relating to this event.
 1839         """
 1840 
 1841     def PopupMenu(self, menu):
 1842         """
 1843         PopupMenu(menu) -> bool
 1844         
 1845         Display a popup menu as a result of this (dropdown clicked) event.
 1846         """
 1847     Bar = property(None, None)
 1848     Button = property(None, None)
 1849 # end of class RibbonButtonBarEvent
 1850 
 1851 
 1852 EVT_RIBBONBUTTONBAR_CLICKED = wx.PyEventBinder( wxEVT_RIBBONBUTTONBAR_CLICKED, 1 )
 1853 EVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED = wx.PyEventBinder( wxEVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED, 1 )
 1854 #-- end-ribbon_buttonbar --#
 1855 #-- begin-ribbon_gallery --#
 1856 RIBBON_GALLERY_BUTTON_NORMAL = 0
 1857 RIBBON_GALLERY_BUTTON_HOVERED = 0
 1858 RIBBON_GALLERY_BUTTON_ACTIVE = 0
 1859 RIBBON_GALLERY_BUTTON_DISABLED = 0
 1860 wxEVT_RIBBONGALLERY_HOVER_CHANGED = 0
 1861 wxEVT_RIBBONGALLERY_SELECTED = 0
 1862 wxEVT_RIBBONGALLERY_CLICKED = 0
 1863 
 1864 class RibbonGallery(RibbonControl):
 1865     """
 1866     RibbonGallery()
 1867     RibbonGallery(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
 1868     
 1869     A ribbon gallery is like a wxListBox, but for bitmaps rather than
 1870     strings.
 1871     """
 1872 
 1873     def __init__(self, *args, **kw):
 1874         """
 1875         RibbonGallery()
 1876         RibbonGallery(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
 1877         
 1878         A ribbon gallery is like a wxListBox, but for bitmaps rather than
 1879         strings.
 1880         """
 1881 
 1882     def Create(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0):
 1883         """
 1884         Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
 1885         
 1886         Create a gallery in two-step gallery construction.
 1887         """
 1888 
 1889     def Clear(self):
 1890         """
 1891         Clear()
 1892         
 1893         Remove all items from the gallery.
 1894         """
 1895 
 1896     def IsEmpty(self):
 1897         """
 1898         IsEmpty() -> bool
 1899         
 1900         Query if the gallery has no items in it.
 1901         """
 1902 
 1903     def GetCount(self):
 1904         """
 1905         GetCount() -> unsignedint
 1906         
 1907         Get the number of items in the gallery.
 1908         """
 1909 
 1910     def GetItem(self, n):
 1911         """
 1912         GetItem(n) -> RibbonGalleryItem
 1913         
 1914         Get an item by index.
 1915         """
 1916 
 1917     def Append(self, *args, **kw):
 1918         """
 1919         Append(bitmap, id) -> RibbonGalleryItem
 1920         Append(bitmap, id, clientData) -> RibbonGalleryItem
 1921         
 1922         Add an item to the gallery (with no client data).
 1923         """
 1924 
 1925     def SetItemClientData(self, item, data):
 1926         """
 1927         SetItemClientData(item, data)
 1928         
 1929         Set the client object associated with a gallery item.
 1930         """
 1931 
 1932     def GetItemClientData(self, item):
 1933         """
 1934         GetItemClientData(item) -> ClientData
 1935         
 1936         Get the client object associated with a gallery item.
 1937         """
 1938 
 1939     def SetSelection(self, item):
 1940         """
 1941         SetSelection(item)
 1942         
 1943         Set the selection to the given item, or removes the selection if item
 1944         == NULL.
 1945         """
 1946 
 1947     def GetSelection(self):
 1948         """
 1949         GetSelection() -> RibbonGalleryItem
 1950         
 1951         Get the currently selected item, or NULL if there is none.
 1952         """
 1953 
 1954     def GetHoveredItem(self):
 1955         """
 1956         GetHoveredItem() -> RibbonGalleryItem
 1957         
 1958         Get the currently hovered item, or NULL if there is none.
 1959         """
 1960 
 1961     def GetActiveItem(self):
 1962         """
 1963         GetActiveItem() -> RibbonGalleryItem
 1964         
 1965         Get the currently active item, or NULL if there is none.
 1966         """
 1967 
 1968     def GetUpButtonState(self):
 1969         """
 1970         GetUpButtonState() -> RibbonGalleryButtonState
 1971         
 1972         Get the state of the scroll up button.
 1973         """
 1974 
 1975     def GetDownButtonState(self):
 1976         """
 1977         GetDownButtonState() -> RibbonGalleryButtonState
 1978         
 1979         Get the state of the scroll down button.
 1980         """
 1981 
 1982     def GetExtensionButtonState(self):
 1983         """
 1984         GetExtensionButtonState() -> RibbonGalleryButtonState
 1985         
 1986         Get the state of the "extension" button.
 1987         """
 1988 
 1989     def IsHovered(self):
 1990         """
 1991         IsHovered() -> bool
 1992         
 1993         Query is the mouse is currently hovered over the gallery.
 1994         """
 1995 
 1996     def ScrollLines(self, lines):
 1997         """
 1998         ScrollLines(lines) -> bool
 1999         
 2000         Scroll the gallery contents by some amount.
 2001         """
 2002 
 2003     def ScrollPixels(self, pixels):
 2004         """
 2005         ScrollPixels(pixels) -> bool
 2006         
 2007         Scroll the gallery contents by some fine-grained amount.
 2008         """
 2009 
 2010     def EnsureVisible(self, item):
 2011         """
 2012         EnsureVisible(item)
 2013         
 2014         Scroll the gallery to ensure that the given item is visible.
 2015         """
 2016     ActiveItem = property(None, None)
 2017     Count = property(None, None)
 2018     DownButtonState = property(None, None)
 2019     ExtensionButtonState = property(None, None)
 2020     HoveredItem = property(None, None)
 2021     Selection = property(None, None)
 2022     UpButtonState = property(None, None)
 2023 # end of class RibbonGallery
 2024 
 2025 
 2026 class RibbonGalleryEvent(wx.CommandEvent):
 2027     """
 2028     RibbonGalleryEvent(command_type=wx.wxEVT_NULL, win_id=0, gallery=None, item=None)
 2029     """
 2030 
 2031     def __init__(self, command_type=wx.wxEVT_NULL, win_id=0, gallery=None, item=None):
 2032         """
 2033         RibbonGalleryEvent(command_type=wx.wxEVT_NULL, win_id=0, gallery=None, item=None)
 2034         """
 2035 
 2036     def GetGallery(self):
 2037         """
 2038         GetGallery() -> RibbonGallery
 2039         
 2040         Returns the gallery which the event relates to.
 2041         """
 2042 
 2043     def GetGalleryItem(self):
 2044         """
 2045         GetGalleryItem() -> RibbonGalleryItem
 2046         
 2047         Returns the gallery item which the event relates to, or NULL if it
 2048         does not relate to an item.
 2049         """
 2050 
 2051     def SetGallery(self, gallery):
 2052         """
 2053         SetGallery(gallery)
 2054         
 2055         Sets the gallery relating to this event.
 2056         """
 2057 
 2058     def SetGalleryItem(self, item):
 2059         """
 2060         SetGalleryItem(item)
 2061         
 2062         Sets the gallery item relating to this event.
 2063         """
 2064     Gallery = property(None, None)
 2065     GalleryItem = property(None, None)
 2066 # end of class RibbonGalleryEvent
 2067 
 2068 
 2069 EVT_RIBBONGALLERY_HOVER_CHANGED = wx.PyEventBinder( wxEVT_RIBBONGALLERY_HOVER_CHANGED, 1 )
 2070 EVT_RIBBONGALLERY_SELECTED = wx.PyEventBinder( wxEVT_RIBBONGALLERY_SELECTED, 1 )
 2071 EVT_RIBBONGALLERY_CLICKED = wx.PyEventBinder( wxEVT_RIBBONGALLERY_CLICKED, 1 )
 2072 #-- end-ribbon_gallery --#
 2073 #-- begin-ribbon_toolbar --#
 2074 wxEVT_RIBBONTOOLBAR_CLICKED = 0
 2075 wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED = 0
 2076 
 2077 class RibbonToolBar(RibbonControl):
 2078     """
 2079     RibbonToolBar()
 2080     RibbonToolBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
 2081     
 2082     A ribbon tool bar is similar to a traditional toolbar which has no
 2083     labels.
 2084     """
 2085 
 2086     def __init__(self, *args, **kw):
 2087         """
 2088         RibbonToolBar()
 2089         RibbonToolBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
 2090         
 2091         A ribbon tool bar is similar to a traditional toolbar which has no
 2092         labels.
 2093         """
 2094 
 2095     def Create(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0):
 2096         """
 2097         Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
 2098         
 2099         Create a tool bar in two-step tool bar construction.
 2100         """
 2101 
 2102     def AddTool(self, *args, **kw):
 2103         """
 2104         AddTool(tool_id, bitmap, help_string, kind=RIBBON_BUTTON_NORMAL) -> RibbonToolBarToolBase
 2105         AddTool(tool_id, bitmap, bitmap_disabled=wx.NullBitmap, help_string=wx.EmptyString, kind=RIBBON_BUTTON_NORMAL, clientData=None) -> RibbonToolBarToolBase
 2106         
 2107         Add a tool to the tool bar (simple version).
 2108         """
 2109 
 2110     def AddDropdownTool(self, tool_id, bitmap, help_string=wx.EmptyString):
 2111         """
 2112         AddDropdownTool(tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase
 2113         
 2114         Add a dropdown tool to the tool bar (simple version).
 2115         """
 2116 
 2117     def AddHybridTool(self, tool_id, bitmap, help_string=wx.EmptyString):
 2118         """
 2119         AddHybridTool(tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase
 2120         
 2121         Add a hybrid tool to the tool bar (simple version).
 2122         """
 2123 
 2124     def AddToggleTool(self, tool_id, bitmap, help_string):
 2125         """
 2126         AddToggleTool(tool_id, bitmap, help_string) -> RibbonToolBarToolBase
 2127         
 2128         Add a toggle tool to the tool bar (simple version).
 2129         """
 2130 
 2131     def AddSeparator(self):
 2132         """
 2133         AddSeparator() -> RibbonToolBarToolBase
 2134         
 2135         Add a separator to the tool bar.
 2136         """
 2137 
 2138     def InsertTool(self, *args, **kw):
 2139         """
 2140         InsertTool(pos, tool_id, bitmap, help_string, kind=RIBBON_BUTTON_NORMAL) -> RibbonToolBarToolBase
 2141         InsertTool(pos, tool_id, bitmap, bitmap_disabled=wx.NullBitmap, help_string=wx.EmptyString, kind=RIBBON_BUTTON_NORMAL, clientData=None) -> RibbonToolBarToolBase
 2142         
 2143         Insert a tool to the tool bar (simple version) as the specified
 2144         position.
 2145         """
 2146 
 2147     def InsertDropdownTool(self, pos, tool_id, bitmap, help_string=wx.EmptyString):
 2148         """
 2149         InsertDropdownTool(pos, tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase
 2150         
 2151         Insert a dropdown tool to the tool bar (simple version) as the
 2152         specified position.
 2153         """
 2154 
 2155     def InsertHybridTool(self, pos, tool_id, bitmap, help_string=wx.EmptyString):
 2156         """
 2157         InsertHybridTool(pos, tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase
 2158         
 2159         Insert a hybrid tool to the tool bar (simple version) as the specified
 2160         position.
 2161         """
 2162 
 2163     def InsertToggleTool(self, pos, tool_id, bitmap, help_string=wx.EmptyString):
 2164         """
 2165         InsertToggleTool(pos, tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase
 2166         
 2167         Insert a toggle tool to the tool bar (simple version) as the specified
 2168         position.
 2169         """
 2170 
 2171     def InsertSeparator(self, pos):
 2172         """
 2173         InsertSeparator(pos) -> RibbonToolBarToolBase
 2174         
 2175         Insert a separator to the tool bar at the specified position.
 2176         """
 2177 
 2178     def ClearTools(self):
 2179         """
 2180         ClearTools()
 2181         
 2182         Deletes all the tools in the toolbar.
 2183         """
 2184 
 2185     def DeleteTool(self, tool_id):
 2186         """
 2187         DeleteTool(tool_id) -> bool
 2188         
 2189         Removes the specified tool from the toolbar and deletes it.
 2190         """
 2191 
 2192     def DeleteToolByPos(self, pos):
 2193         """
 2194         DeleteToolByPos(pos) -> bool
 2195         
 2196         This function behaves like DeleteTool() but it deletes the tool at the
 2197         specified position and not the one with the given id.
 2198         """
 2199 
 2200     def FindById(self, tool_id):
 2201         """
 2202         FindById(tool_id) -> RibbonToolBarToolBase
 2203         
 2204         Returns a pointer to the tool opaque structure by id or NULL if no
 2205         corresponding tool is found.
 2206         """
 2207 
 2208     def GetToolByPos(self, pos):
 2209         """
 2210         GetToolByPos(pos) -> RibbonToolBarToolBase
 2211         
 2212         Return the opaque pointer corresponding to the given tool.
 2213         """
 2214 
 2215     def GetToolId(self, tool):
 2216         """
 2217         GetToolId(tool) -> int
 2218         
 2219         Return the id assciated to the tool opaque structure.
 2220         """
 2221 
 2222     def GetToolClientData(self, tool_id):
 2223         """
 2224         GetToolClientData(tool_id) -> PyUserData
 2225         
 2226         Get any client data associated with the tool.
 2227         """
 2228 
 2229     def GetToolEnabled(self, tool_id):
 2230         """
 2231         GetToolEnabled(tool_id) -> bool
 2232         
 2233         Called to determine whether a tool is enabled (responds to user
 2234         input).
 2235         """
 2236 
 2237     def GetToolHelpString(self, tool_id):
 2238         """
 2239         GetToolHelpString(tool_id) -> String
 2240         
 2241         Returns the help string for the given tool.
 2242         """
 2243 
 2244     def GetToolKind(self, tool_id):
 2245         """
 2246         GetToolKind(tool_id) -> RibbonButtonKind
 2247         
 2248         Return the kind of the given tool.
 2249         """
 2250 
 2251     def GetToolPos(self, tool_id):
 2252         """
 2253         GetToolPos(tool_id) -> int
 2254         
 2255         Returns the tool position in the toolbar, or wxNOT_FOUND if the tool
 2256         is not found.
 2257         """
 2258 
 2259     def GetToolState(self, tool_id):
 2260         """
 2261         GetToolState(tool_id) -> bool
 2262         
 2263         Gets the on/off state of a toggle tool.
 2264         """
 2265 
 2266     def Realize(self):
 2267         """
 2268         Realize() -> bool
 2269         
 2270         Calculate tool layouts and positions.
 2271         """
 2272 
 2273     def SetRows(self, nMin, nMax=-1):
 2274         """
 2275         SetRows(nMin, nMax=-1)
 2276         
 2277         Set the number of rows to distribute tool groups over.
 2278         """
 2279 
 2280     def SetToolClientData(self, tool_id, clientData):
 2281         """
 2282         SetToolClientData(tool_id, clientData)
 2283         
 2284         Sets the client data associated with the tool.
 2285         """
 2286 
 2287     def SetToolDisabledBitmap(self, tool_id, bitmap):
 2288         """
 2289         SetToolDisabledBitmap(tool_id, bitmap)
 2290         
 2291         Sets the bitmap to be used by the tool with the given ID when the tool
 2292         is in a disabled state.
 2293         """
 2294 
 2295     def SetToolHelpString(self, tool_id, helpString):
 2296         """
 2297         SetToolHelpString(tool_id, helpString)
 2298         
 2299         Sets the help string shown in tooltip for the given tool.
 2300         """
 2301 
 2302     def SetToolNormalBitmap(self, tool_id, bitmap):
 2303         """
 2304         SetToolNormalBitmap(tool_id, bitmap)
 2305         
 2306         Sets the bitmap to be used by the tool with the given ID.
 2307         """
 2308 
 2309     def EnableTool(self, tool_id, enable=True):
 2310         """
 2311         EnableTool(tool_id, enable=True)
 2312         
 2313         Enable or disable a single tool on the bar.
 2314         """
 2315 
 2316     def ToggleTool(self, tool_id, checked):
 2317         """
 2318         ToggleTool(tool_id, checked)
 2319         
 2320         Set a toggle tool to the checked or unchecked state.
 2321         """
 2322 # end of class RibbonToolBar
 2323 
 2324 
 2325 class RibbonToolBarEvent(wx.CommandEvent):
 2326     """
 2327     RibbonToolBarEvent(command_type=wx.wxEVT_NULL, win_id=0, bar=None)
 2328     """
 2329 
 2330     def __init__(self, command_type=wx.wxEVT_NULL, win_id=0, bar=None):
 2331         """
 2332         RibbonToolBarEvent(command_type=wx.wxEVT_NULL, win_id=0, bar=None)
 2333         """
 2334 
 2335     def GetBar(self):
 2336         """
 2337         GetBar() -> RibbonToolBar
 2338         """
 2339 
 2340     def SetBar(self, bar):
 2341         """
 2342         SetBar(bar)
 2343         """
 2344 
 2345     def PopupMenu(self, menu):
 2346         """
 2347         PopupMenu(menu) -> bool
 2348         """
 2349     Bar = property(None, None)
 2350 # end of class RibbonToolBarEvent
 2351 
 2352 
 2353 EVT_RIBBONTOOLBAR_CLICKED = wx.PyEventBinder( wxEVT_RIBBONTOOLBAR_CLICKED, 1 )
 2354 EVT_RIBBONTOOLBAR_DROPDOWN_CLICKED = wx.PyEventBinder( wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED, 1 )
 2355 #-- end-ribbon_toolbar --#
